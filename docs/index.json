{
  "api/DontPanic.TumblrSharp.ApiMethod.-ctor.html": {
    "href": "api/DontPanic.TumblrSharp.ApiMethod.-ctor.html",
    "title": "Constructor ApiMethod | NewTumblrSharp",
    "summary": "Constructor ApiMethod Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll ApiMethod(string, Token, HttpMethod, MethodParameterSet) Initializes a new instance of the ApiMethod class. public ApiMethod(string methodUrl, Token oAuthToken, HttpMethod httpMethod, MethodParameterSet parameters = null) Parameters methodUrl string The url of the method to call. oAuthToken Token The OAuth Token to use for the call. Can be null if the method does not require OAuth. httpMethod HttpMethod The required HttpMethod for the Tumblr API call. Only GET and POST are supported. parameters MethodParameterSet The parameters for the Tumblr API call. Can be null if the method does not require parameters. Exceptions ArgumentNullException methodUrl is null. ArgumentException methodUrl is empty. httpMethod is not Get or Post."
  },
  "api/DontPanic.TumblrSharp.ApiMethod.HttpMethod.html": {
    "href": "api/DontPanic.TumblrSharp.ApiMethod.HttpMethod.html",
    "title": "Property HttpMethod | NewTumblrSharp",
    "summary": "Property HttpMethod Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll HttpMethod Gets the required HttpMethod for the Tumblr API call. public HttpMethod HttpMethod { get; } Property Value HttpMethod"
  },
  "api/DontPanic.TumblrSharp.ApiMethod.OAuthToken.html": {
    "href": "api/DontPanic.TumblrSharp.ApiMethod.OAuthToken.html",
    "title": "Property OAuthToken | NewTumblrSharp",
    "summary": "Property OAuthToken Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll OAuthToken Gets the OAuth Token to use for the call. public Token OAuthToken { get; } Property Value Token"
  },
  "api/DontPanic.TumblrSharp.ApiMethod.Parameters.html": {
    "href": "api/DontPanic.TumblrSharp.ApiMethod.Parameters.html",
    "title": "Property Parameters | NewTumblrSharp",
    "summary": "Property Parameters Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Parameters Gets the parameters for the Tumblr API call. public MethodParameterSet Parameters { get; } Property Value MethodParameterSet"
  },
  "api/DontPanic.TumblrSharp.ApiMethod.Url.html": {
    "href": "api/DontPanic.TumblrSharp.ApiMethod.Url.html",
    "title": "Property Url | NewTumblrSharp",
    "summary": "Property Url Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Url Gets the url of the Tumblr API method to call. public string Url { get; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.ApiMethod.html": {
    "href": "api/DontPanic.TumblrSharp.ApiMethod.html",
    "title": "Class ApiMethod | NewTumblrSharp",
    "summary": "Class ApiMethod Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Encapsulates all the data required to make a Tumblr API call. public class ApiMethod Inheritance object ApiMethod Derived BlogMethod UserMethod Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApiMethod(string, Token, HttpMethod, MethodParameterSet) Initializes a new instance of the ApiMethod class. Properties HttpMethod Gets the required HttpMethod for the Tumblr API call. OAuthToken Gets the OAuth Token to use for the call. Parameters Gets the parameters for the Tumblr API call. Url Gets the url of the Tumblr API method to call."
  },
  "api/DontPanic.TumblrSharp.AvatarShape.html": {
    "href": "api/DontPanic.TumblrSharp.AvatarShape.html",
    "title": "Enum AvatarShape | NewTumblrSharp",
    "summary": "Enum AvatarShape Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Options for what shape a user's avatar is intended to display as [JsonConverter(typeof(StringEnumConverter))] public enum AvatarShape Fields [EnumMember(Value = \"avatar-circle\")] AvatarCircle = 4 circle avatar [EnumMember(Value = \"avatar-rounded\")] AvatarRounded = 6 rounded avatar [EnumMember(Value = \"avatar-square\")] AvatarSquare = 5 square avatar [EnumMember(Value = \"circle\")] Circle = 2 Circular avatar [EnumMember(Value = \"\")] None = 0 Empty avatar shape [EnumMember(Value = \"rounded\")] Rounded = 3 rounded avatar [EnumMember(Value = \"square\")] Square = 1 Square avatar"
  },
  "api/DontPanic.TumblrSharp.BinaryFile.-ctor.html": {
    "href": "api/DontPanic.TumblrSharp.BinaryFile.-ctor.html",
    "title": "Constructor BinaryFile | NewTumblrSharp",
    "summary": "Constructor BinaryFile Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll BinaryFile(byte[], string, string) Initializes a new instance of the BinaryFile class. public BinaryFile(byte[] data, string fileName = null, string mimeType = null) Parameters data byte[] The binary file content. fileName string The file name. mimeType string The file's mime type. BinaryFile(Stream, string, string) Initializes a new instance of the BinaryFile class. public BinaryFile(Stream stream, string fileName = null, string mimeType = null) Parameters stream Stream The binary file content. fileName string The file name. mimeType string The file's mime type."
  },
  "api/DontPanic.TumblrSharp.BinaryFile.Data.html": {
    "href": "api/DontPanic.TumblrSharp.BinaryFile.Data.html",
    "title": "Property Data | NewTumblrSharp",
    "summary": "Property Data Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Data Gets the binary file content. public byte[] Data { get; } Property Value byte[]"
  },
  "api/DontPanic.TumblrSharp.BinaryFile.FileName.html": {
    "href": "api/DontPanic.TumblrSharp.BinaryFile.FileName.html",
    "title": "Property FileName | NewTumblrSharp",
    "summary": "Property FileName Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll FileName Gets the file name. public string FileName { get; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.BinaryFile.MimeType.html": {
    "href": "api/DontPanic.TumblrSharp.BinaryFile.MimeType.html",
    "title": "Property MimeType | NewTumblrSharp",
    "summary": "Property MimeType Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll MimeType Gets the file's mime type. public string MimeType { get; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.BinaryFile.html": {
    "href": "api/DontPanic.TumblrSharp.BinaryFile.html",
    "title": "Class BinaryFile | NewTumblrSharp",
    "summary": "Class BinaryFile Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Represents a binary file (photo, video or audio). public class BinaryFile Inheritance object BinaryFile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BinaryFile(byte[], string, string) Initializes a new instance of the BinaryFile class. BinaryFile(Stream, string, string) Initializes a new instance of the BinaryFile class. Properties Data Gets the binary file content. FileName Gets the file name. MimeType Gets the file's mime type."
  },
  "api/DontPanic.TumblrSharp.BlogMethod.-ctor.html": {
    "href": "api/DontPanic.TumblrSharp.BlogMethod.-ctor.html",
    "title": "Constructor BlogMethod | NewTumblrSharp",
    "summary": "Constructor BlogMethod Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll BlogMethod(string, string, Token, HttpMethod, MethodParameterSet) Initializes a new instance of the BlogMethod class. public BlogMethod(string blogName, string methodName, Token oAuthToken, HttpMethod httpMethod, MethodParameterSet parameters = null) Parameters blogName string The name of the blog target of the method call. Can be passed with or without the trailing \".tumblr.com\". methodName string The name of the method to call. The method url will be automatically built using this information together with the blogName. oAuthToken Token The OAuth Token to use for the call. Can be null if the method does not require OAuth. httpMethod HttpMethod The required HttpMethod for the Tumblr API call. Only Get and Post are supported. parameters MethodParameterSet The parameters for the Tumblr API call. Can be null if the method does not require parameters. Exceptions ArgumentNullException blogName is null. methodName is null. ArgumentException blogName is empty. methodName is empty."
  },
  "api/DontPanic.TumblrSharp.BlogMethod.html": {
    "href": "api/DontPanic.TumblrSharp.BlogMethod.html",
    "title": "Class BlogMethod | NewTumblrSharp",
    "summary": "Class BlogMethod Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Represents a blog API method. public class BlogMethod : ApiMethod Inheritance object ApiMethod BlogMethod Inherited Members ApiMethod.Url ApiMethod.OAuthToken ApiMethod.HttpMethod ApiMethod.Parameters object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BlogMethod(string, string, Token, HttpMethod, MethodParameterSet) Initializes a new instance of the BlogMethod class."
  },
  "api/DontPanic.TumblrSharp.BlogType.html": {
    "href": "api/DontPanic.TumblrSharp.BlogType.html",
    "title": "Enum BlogType | NewTumblrSharp",
    "summary": "Enum BlogType Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Defines the type of a blog. public enum BlogType Fields Private = 1 Private. Public = 0 Public."
  },
  "api/DontPanic.TumblrSharp.Client.AnswerPost.Answer.html": {
    "href": "api/DontPanic.TumblrSharp.Client.AnswerPost.Answer.html",
    "title": "Property Answer | NewTumblrSharp",
    "summary": "Property Answer Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Answer Gets or sets the answer. [JsonProperty(\"answer\")] public string Answer { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.AnswerPost.AskingName.html": {
    "href": "api/DontPanic.TumblrSharp.Client.AnswerPost.AskingName.html",
    "title": "Property AskingName | NewTumblrSharp",
    "summary": "Property AskingName Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll AskingName Gets or sets the name of the user asking the question. [JsonProperty(\"asking_name\")] public string AskingName { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.AnswerPost.AskingUrl.html": {
    "href": "api/DontPanic.TumblrSharp.Client.AnswerPost.AskingUrl.html",
    "title": "Property AskingUrl | NewTumblrSharp",
    "summary": "Property AskingUrl Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll AskingUrl Gets or sets the url of the blog of the user asking the question. [JsonProperty(\"asking_url\")] public string AskingUrl { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.AnswerPost.Question.html": {
    "href": "api/DontPanic.TumblrSharp.Client.AnswerPost.Question.html",
    "title": "Property Question | NewTumblrSharp",
    "summary": "Property Question Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Question Gets or sets tquestion. [JsonProperty(\"question\")] public string Question { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.AnswerPost.html": {
    "href": "api/DontPanic.TumblrSharp.Client.AnswerPost.html",
    "title": "Class AnswerPost | NewTumblrSharp",
    "summary": "Class AnswerPost Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents an answer post. public class AnswerPost : BasePost Inheritance object BasePost AnswerPost Inherited Members BasePost.Type BasePost.BlogName BasePost.Id BasePost.Url BasePost.Slug BasePost.Timestamp BasePost.State BasePost.Format BasePost.ReblogKey BasePost.Tags BasePost.ShortUrl BasePost.Summary BasePost.NotesCount BasePost.Notes BasePost.SourceUrl BasePost.SourceTitle BasePost.NumberOfPostsInResponse BasePost.Liked BasePost.IsMobile BasePost.IsBookmarklet BasePost.Reblog BasePost.RebloggedFromId BasePost.RebloggedFromUrl BasePost.RebloggedFromName BasePost.RebloggedFromTitle BasePost.RebloggedRootId BasePost.RebloggedRootUrl BasePost.RebloggedRootName BasePost.RebloggedRootTitle BasePost.Trails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Answer Gets or sets the answer. AskingName Gets or sets the name of the user asking the question. AskingUrl Gets or sets the url of the blog of the user asking the question. Question Gets or sets tquestion."
  },
  "api/DontPanic.TumblrSharp.Client.AudioPost.Album.html": {
    "href": "api/DontPanic.TumblrSharp.Client.AudioPost.Album.html",
    "title": "Property Album | NewTumblrSharp",
    "summary": "Property Album Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Album Gets or sets the audio file's ID3 album value. [JsonProperty(\"album\")] public string Album { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.AudioPost.AlbumArt.html": {
    "href": "api/DontPanic.TumblrSharp.Client.AudioPost.AlbumArt.html",
    "title": "Property AlbumArt | NewTumblrSharp",
    "summary": "Property AlbumArt Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll AlbumArt Gets or sets the location of the audio file's ID3 album art image. [JsonProperty(\"album_art\")] public string AlbumArt { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.AudioPost.Artist.html": {
    "href": "api/DontPanic.TumblrSharp.Client.AudioPost.Artist.html",
    "title": "Property Artist | NewTumblrSharp",
    "summary": "Property Artist Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Artist Gets or sets the audio file's ID3 artist value [JsonProperty(\"artist\")] public string Artist { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.AudioPost.AudioUrl.html": {
    "href": "api/DontPanic.TumblrSharp.Client.AudioPost.AudioUrl.html",
    "title": "Property AudioUrl | NewTumblrSharp",
    "summary": "Property AudioUrl Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll AudioUrl Gets or sets the url to the audio file. [JsonProperty(\"audio_url\")] public string AudioUrl { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.AudioPost.Caption.html": {
    "href": "api/DontPanic.TumblrSharp.Client.AudioPost.Caption.html",
    "title": "Property Caption | NewTumblrSharp",
    "summary": "Property Caption Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Caption Gets or sets the user-supplied caption. [JsonProperty(\"caption\")] public string Caption { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.AudioPost.Player.html": {
    "href": "api/DontPanic.TumblrSharp.Client.AudioPost.Player.html",
    "title": "Property Player | NewTumblrSharp",
    "summary": "Property Player Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Player Gets or sets the HTML for embedding the audio player. [JsonProperty(\"player\")] public string Player { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.AudioPost.PlaysCount.html": {
    "href": "api/DontPanic.TumblrSharp.Client.AudioPost.PlaysCount.html",
    "title": "Property PlaysCount | NewTumblrSharp",
    "summary": "Property PlaysCount Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll PlaysCount Gets or sets the number of times the audio post has been played. [JsonProperty(\"plays\")] public int PlaysCount { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.AudioPost.TrackName.html": {
    "href": "api/DontPanic.TumblrSharp.Client.AudioPost.TrackName.html",
    "title": "Property TrackName | NewTumblrSharp",
    "summary": "Property TrackName Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll TrackName Gets or sets the audio file's ID3 title value. [JsonProperty(\"track_name\")] public string TrackName { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.AudioPost.TrackNumber.html": {
    "href": "api/DontPanic.TumblrSharp.Client.AudioPost.TrackNumber.html",
    "title": "Property TrackNumber | NewTumblrSharp",
    "summary": "Property TrackNumber Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll TrackNumber Gets or sets the audio file's ID3 track value. [JsonProperty(\"track_number\")] public int TrackNumber { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.AudioPost.Year.html": {
    "href": "api/DontPanic.TumblrSharp.Client.AudioPost.Year.html",
    "title": "Property Year | NewTumblrSharp",
    "summary": "Property Year Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Year Gets or sets the audio file's ID3 year value. [JsonProperty(\"year\")] public int Year { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.AudioPost.html": {
    "href": "api/DontPanic.TumblrSharp.Client.AudioPost.html",
    "title": "Class AudioPost | NewTumblrSharp",
    "summary": "Class AudioPost Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents an audio post. public class AudioPost : BasePost Inheritance object BasePost AudioPost Inherited Members BasePost.Type BasePost.BlogName BasePost.Id BasePost.Url BasePost.Slug BasePost.Timestamp BasePost.State BasePost.Format BasePost.ReblogKey BasePost.Tags BasePost.ShortUrl BasePost.Summary BasePost.NotesCount BasePost.Notes BasePost.SourceUrl BasePost.SourceTitle BasePost.NumberOfPostsInResponse BasePost.Liked BasePost.IsMobile BasePost.IsBookmarklet BasePost.Reblog BasePost.RebloggedFromId BasePost.RebloggedFromUrl BasePost.RebloggedFromName BasePost.RebloggedFromTitle BasePost.RebloggedRootId BasePost.RebloggedRootUrl BasePost.RebloggedRootName BasePost.RebloggedRootTitle BasePost.Trails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Album Gets or sets the audio file's ID3 album value. AlbumArt Gets or sets the location of the audio file's ID3 album art image. Artist Gets or sets the audio file's ID3 artist value AudioUrl Gets or sets the url to the audio file. Caption Gets or sets the user-supplied caption. Player Gets or sets the HTML for embedding the audio player. PlaysCount Gets or sets the number of times the audio post has been played. TrackName Gets or sets the audio file's ID3 title value. TrackNumber Gets or sets the audio file's ID3 track value. Year Gets or sets the audio file's ID3 year value."
  },
  "api/DontPanic.TumblrSharp.Client.BaseNote.AvatarShape.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BaseNote.AvatarShape.html",
    "title": "Property AvatarShape | NewTumblrSharp",
    "summary": "Property AvatarShape Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll AvatarShape The avatar shape used by the blog that left the note [JsonProperty(PropertyName = \"avatar_shape\")] public AvatarShape AvatarShape { get; set; } Property Value AvatarShape"
  },
  "api/DontPanic.TumblrSharp.Client.BaseNote.BlogName.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BaseNote.BlogName.html",
    "title": "Property BlogName | NewTumblrSharp",
    "summary": "Property BlogName Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll BlogName The short name used to uniquely identify a blog. [JsonProperty(PropertyName = \"blog_name\")] public string BlogName { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BaseNote.BlogUrl.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BaseNote.BlogUrl.html",
    "title": "Property BlogUrl | NewTumblrSharp",
    "summary": "Property BlogUrl Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll BlogUrl The base URL of the blog that left the note [JsonProperty(PropertyName = \"blog_url\")] public string BlogUrl { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BaseNote.BlogUuid.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BaseNote.BlogUuid.html",
    "title": "Property BlogUuid | NewTumblrSharp",
    "summary": "Property BlogUuid Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll BlogUuid The full domain used to uniquely identify a blog. [JsonProperty(PropertyName = \"blog_uuid\")] public string BlogUuid { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BaseNote.Equals.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BaseNote.Equals.html",
    "title": "Method Equals | NewTumblrSharp",
    "summary": "Method Equals Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool"
  },
  "api/DontPanic.TumblrSharp.Client.BaseNote.Followed.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BaseNote.Followed.html",
    "title": "Property Followed | NewTumblrSharp",
    "summary": "Property Followed Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Followed Indicates if the current user is following the blog who left the post [JsonProperty(PropertyName = \"followed\")] public bool Followed { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.BaseNote.GetHashCode.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BaseNote.GetHashCode.html",
    "title": "Method GetHashCode | NewTumblrSharp",
    "summary": "Method GetHashCode Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll GetHashCode() public override int GetHashCode() Returns int"
  },
  "api/DontPanic.TumblrSharp.Client.BaseNote.PostId.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BaseNote.PostId.html",
    "title": "Property PostId | NewTumblrSharp",
    "summary": "Property PostId Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll PostId The post ID of the reblogged post if the note is a reblog [JsonProperty(PropertyName = \"post_id\")] public string PostId { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BaseNote.ReblogParentBlogName.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BaseNote.ReblogParentBlogName.html",
    "title": "Property ReblogParentBlogName | NewTumblrSharp",
    "summary": "Property ReblogParentBlogName Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll ReblogParentBlogName The parent blog of the reblogged post if the note is a reblog [JsonProperty(PropertyName = \"reblog_parent_blog_name\")] public string ReblogParentBlogName { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BaseNote.ReplyText.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BaseNote.ReplyText.html",
    "title": "Property ReplyText | NewTumblrSharp",
    "summary": "Property ReplyText Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll ReplyText The text of the note if it is a reply [JsonProperty(PropertyName = \"reply_text\")] public string ReplyText { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BaseNote.Timestamp.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BaseNote.Timestamp.html",
    "title": "Property Timestamp | NewTumblrSharp",
    "summary": "Property Timestamp Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Timestamp The date and time of the post (in local time). [JsonConverter(typeof(TimestampConverter))] [JsonProperty(PropertyName = \"timestamp\")] public DateTime Timestamp { get; set; } Property Value DateTime"
  },
  "api/DontPanic.TumblrSharp.Client.BaseNote.Type.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BaseNote.Type.html",
    "title": "Property Type | NewTumblrSharp",
    "summary": "Property Type Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Type The type of note applied to the post [JsonConverter(typeof(EnumStringConverter))] [JsonProperty(PropertyName = \"type\")] public NoteType Type { get; set; } Property Value NoteType"
  },
  "api/DontPanic.TumblrSharp.Client.BaseNote.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BaseNote.html",
    "title": "Class BaseNote | NewTumblrSharp",
    "summary": "Class BaseNote Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Base class for post notes. public class BaseNote Inheritance object BaseNote Derived PostAttributionNote Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AvatarShape The avatar shape used by the blog that left the note BlogName The short name used to uniquely identify a blog. BlogUrl The base URL of the blog that left the note BlogUuid The full domain used to uniquely identify a blog. Followed Indicates if the current user is following the blog who left the post PostId The post ID of the reblogged post if the note is a reblog ReblogParentBlogName The parent blog of the reblogged post if the note is a reblog ReplyText The text of the note if it is a reply Timestamp The date and time of the post (in local time). Type The type of note applied to the post Methods Equals(object) GetHashCode()"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.BlogName.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.BlogName.html",
    "title": "Property BlogName | NewTumblrSharp",
    "summary": "Property BlogName Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll BlogName The short name used to uniquely identify a blog. [JsonProperty(PropertyName = \"blog_name\")] public string BlogName { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.Format.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.Format.html",
    "title": "Property Format | NewTumblrSharp",
    "summary": "Property Format Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Format The PostFormat. [JsonConverter(typeof(EnumStringConverter))] [JsonProperty(PropertyName = \"format\")] public PostFormat Format { get; set; } Property Value PostFormat"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.Id.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.Id.html",
    "title": "Property Id | NewTumblrSharp",
    "summary": "Property Id Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Id The post identifier. [JsonProperty(PropertyName = \"id\")] public long Id { get; set; } Property Value long"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.IsBookmarklet.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.IsBookmarklet.html",
    "title": "Property IsBookmarklet | NewTumblrSharp",
    "summary": "Property IsBookmarklet Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll IsBookmarklet Indicates whether the post was created via the Tumblr bookmarklet. [JsonProperty(PropertyName = \"bookmarklet\", NullValueHandling = NullValueHandling.Ignore)] public string IsBookmarklet { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.IsMobile.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.IsMobile.html",
    "title": "Property IsMobile | NewTumblrSharp",
    "summary": "Property IsMobile Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll IsMobile Indicates whether the post was created via mobile/email publishing. [JsonProperty(PropertyName = \"mobile\", NullValueHandling = NullValueHandling.Ignore)] public string IsMobile { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.Liked.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.Liked.html",
    "title": "Property Liked | NewTumblrSharp",
    "summary": "Property Liked Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Liked Indicates if the current user has already liked the post or not. [JsonProperty(PropertyName = \"liked\", NullValueHandling = NullValueHandling.Ignore)] public string Liked { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.Notes.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.Notes.html",
    "title": "Property Notes | NewTumblrSharp",
    "summary": "Property Notes Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Notes The notes (likes and reblogs) for the post [JsonProperty(PropertyName = \"notes\")] [JsonConverter(typeof(NoteConverter))] public List<BaseNote> Notes { get; set; } Property Value List<BaseNote>"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.NotesCount.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.NotesCount.html",
    "title": "Property NotesCount | NewTumblrSharp",
    "summary": "Property NotesCount Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll NotesCount The number of notes (likes and reblogs) for the post. [JsonProperty(PropertyName = \"note_count\")] public long NotesCount { get; set; } Property Value long"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.NumberOfPostsInResponse.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.NumberOfPostsInResponse.html",
    "title": "Property NumberOfPostsInResponse | NewTumblrSharp",
    "summary": "Property NumberOfPostsInResponse Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll NumberOfPostsInResponse The number of posts in the response (can be used for pagination). [JsonProperty(PropertyName = \"total_posts\")] public int NumberOfPostsInResponse { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.Reblog.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.Reblog.html",
    "title": "Property Reblog | NewTumblrSharp",
    "summary": "Property Reblog Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Reblog Reblog [JsonProperty(PropertyName = \"reblog\", NullValueHandling = NullValueHandling.Ignore)] public Reblog Reblog { get; set; } Property Value Reblog"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.ReblogKey.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.ReblogKey.html",
    "title": "Property ReblogKey | NewTumblrSharp",
    "summary": "Property ReblogKey Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll ReblogKey The key to use to reblog the post. [JsonProperty(PropertyName = \"reblog_key\")] public string ReblogKey { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.RebloggedFromId.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.RebloggedFromId.html",
    "title": "Property RebloggedFromId | NewTumblrSharp",
    "summary": "Property RebloggedFromId Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll RebloggedFromId The id of a post being reblogged. [JsonProperty(PropertyName = \"reblogged_from_id\", NullValueHandling = NullValueHandling.Ignore)] public long? RebloggedFromId { get; set; } Property Value long?"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.RebloggedFromName.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.RebloggedFromName.html",
    "title": "Property RebloggedFromName | NewTumblrSharp",
    "summary": "Property RebloggedFromName Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll RebloggedFromName Title of a post being reblogged. [JsonProperty(PropertyName = \"reblogged_from_name\", NullValueHandling = NullValueHandling.Ignore)] public string RebloggedFromName { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.RebloggedFromTitle.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.RebloggedFromTitle.html",
    "title": "Property RebloggedFromTitle | NewTumblrSharp",
    "summary": "Property RebloggedFromTitle Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll RebloggedFromTitle URL of a post being reblogged. [JsonProperty(PropertyName = \"reblogged_from_title\", NullValueHandling = NullValueHandling.Ignore)] public string RebloggedFromTitle { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.RebloggedFromUrl.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.RebloggedFromUrl.html",
    "title": "Property RebloggedFromUrl | NewTumblrSharp",
    "summary": "Property RebloggedFromUrl Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll RebloggedFromUrl Name of a blog being reblogged. [JsonProperty(PropertyName = \"reblogged_from_url\", NullValueHandling = NullValueHandling.Ignore)] public string RebloggedFromUrl { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.RebloggedRootId.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.RebloggedRootId.html",
    "title": "Property RebloggedRootId | NewTumblrSharp",
    "summary": "Property RebloggedRootId Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll RebloggedRootId The id of an original post being reblogged. [JsonProperty(PropertyName = \"reblogged_root_id\", NullValueHandling = NullValueHandling.Ignore)] public long? RebloggedRootId { get; set; } Property Value long?"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.RebloggedRootName.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.RebloggedRootName.html",
    "title": "Property RebloggedRootName | NewTumblrSharp",
    "summary": "Property RebloggedRootName Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll RebloggedRootName Title of the original post being reblogged. [JsonProperty(PropertyName = \"reblogged_root_name\", NullValueHandling = NullValueHandling.Ignore)] public string RebloggedRootName { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.RebloggedRootTitle.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.RebloggedRootTitle.html",
    "title": "Property RebloggedRootTitle | NewTumblrSharp",
    "summary": "Property RebloggedRootTitle Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll RebloggedRootTitle URL of the original post being reblogged. [JsonProperty(PropertyName = \"reblogged_root_title\", NullValueHandling = NullValueHandling.Ignore)] public string RebloggedRootTitle { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.RebloggedRootUrl.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.RebloggedRootUrl.html",
    "title": "Property RebloggedRootUrl | NewTumblrSharp",
    "summary": "Property RebloggedRootUrl Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll RebloggedRootUrl Root name of a post being reblogged. [JsonProperty(PropertyName = \"reblogged_root_url\", NullValueHandling = NullValueHandling.Ignore)] public string RebloggedRootUrl { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.ShortUrl.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.ShortUrl.html",
    "title": "Property ShortUrl | NewTumblrSharp",
    "summary": "Property ShortUrl Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll ShortUrl Shorturl [JsonProperty(PropertyName = \"short_url\")] public string ShortUrl { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.Slug.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.Slug.html",
    "title": "Property Slug | NewTumblrSharp",
    "summary": "Property Slug Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Slug slug [JsonProperty(PropertyName = \"slug\")] public string Slug { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.SourceTitle.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.SourceTitle.html",
    "title": "Property SourceTitle | NewTumblrSharp",
    "summary": "Property SourceTitle Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll SourceTitle The title of the blog which is the source of the post, if any. [JsonProperty(PropertyName = \"source_title\", NullValueHandling = NullValueHandling.Ignore)] public string SourceTitle { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.SourceUrl.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.SourceUrl.html",
    "title": "Property SourceUrl | NewTumblrSharp",
    "summary": "Property SourceUrl Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll SourceUrl The url to the blog that is the source of the post, if any. [JsonProperty(PropertyName = \"source_url\", NullValueHandling = NullValueHandling.Ignore)] public string SourceUrl { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.State.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.State.html",
    "title": "Property State | NewTumblrSharp",
    "summary": "Property State Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll State The PostCreationState. [JsonConverter(typeof(StringEnumConverter))] [JsonProperty(PropertyName = \"state\")] public PostCreationState State { get; set; } Property Value PostCreationState"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.Summary.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.Summary.html",
    "title": "Property Summary | NewTumblrSharp",
    "summary": "Property Summary Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Summary Summary [JsonProperty(PropertyName = \"summary\")] public string Summary { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.Tags.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.Tags.html",
    "title": "Property Tags | NewTumblrSharp",
    "summary": "Property Tags Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Tags The tags applied to the post. [JsonProperty(PropertyName = \"tags\")] public string[] Tags { get; set; } Property Value string[]"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.Timestamp.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.Timestamp.html",
    "title": "Property Timestamp | NewTumblrSharp",
    "summary": "Property Timestamp Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Timestamp The date and time of the post (in local time). [JsonConverter(typeof(TimestampConverter))] [JsonProperty(PropertyName = \"timestamp\")] public DateTime Timestamp { get; set; } Property Value DateTime"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.Trails.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.Trails.html",
    "title": "Property Trails | NewTumblrSharp",
    "summary": "Property Trails Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Trails Trail [JsonProperty(PropertyName = \"trail\", NullValueHandling = NullValueHandling.Include)] [JsonConverter(typeof(TrailConverter))] public List<Trail> Trails { get; set; } Property Value List<Trail>"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.Type.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.Type.html",
    "title": "Property Type | NewTumblrSharp",
    "summary": "Property Type Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Type The post type. [JsonConverter(typeof(EnumStringConverter))] [JsonProperty(PropertyName = \"type\")] public PostType Type { get; set; } Property Value PostType"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.Url.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.Url.html",
    "title": "Property Url | NewTumblrSharp",
    "summary": "Property Url Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Url The url of the post. [JsonProperty(PropertyName = \"post_url\")] public string Url { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.html",
    "title": "Class BasePost | NewTumblrSharp",
    "summary": "Class BasePost Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Base class for post types. public class BasePost Inheritance object BasePost Derived AnswerPost AudioPost ChatPost LinkPost PhotoPost QuotePost TextPost VideoPost Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BlogName The short name used to uniquely identify a blog. Format The PostFormat. Id The post identifier. IsBookmarklet Indicates whether the post was created via the Tumblr bookmarklet. IsMobile Indicates whether the post was created via mobile/email publishing. Liked Indicates if the current user has already liked the post or not. Notes The notes (likes and reblogs) for the post NotesCount The number of notes (likes and reblogs) for the post. NumberOfPostsInResponse The number of posts in the response (can be used for pagination). Reblog Reblog ReblogKey The key to use to reblog the post. RebloggedFromId The id of a post being reblogged. RebloggedFromName Title of a post being reblogged. RebloggedFromTitle URL of a post being reblogged. RebloggedFromUrl Name of a blog being reblogged. RebloggedRootId The id of an original post being reblogged. RebloggedRootName Title of the original post being reblogged. RebloggedRootTitle URL of the original post being reblogged. RebloggedRootUrl Root name of a post being reblogged. ShortUrl Shorturl Slug slug SourceTitle The title of the blog which is the source of the post, if any. SourceUrl The url to the blog that is the source of the post, if any. State The PostCreationState. Summary Summary Tags The tags applied to the post. Timestamp The date and time of the post (in local time). Trails Trail Type The post type. Url The url of the post."
  },
  "api/DontPanic.TumblrSharp.Client.BlogBase.LastUpdated.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BlogBase.LastUpdated.html",
    "title": "Property LastUpdated | NewTumblrSharp",
    "summary": "Property LastUpdated Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll LastUpdated The date and time when the blog was last updated (in local time). [JsonConverter(typeof(TimestampConverter))] [JsonProperty(PropertyName = \"updated\")] public DateTime LastUpdated { get; set; } Property Value DateTime"
  },
  "api/DontPanic.TumblrSharp.Client.BlogBase.Name.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BlogBase.Name.html",
    "title": "Property Name | NewTumblrSharp",
    "summary": "Property Name Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Name The short blog name that appears before tumblr.com in a standard blog hostname (and before the domain in a custom blog hostname). [JsonProperty(PropertyName = \"name\")] public string Name { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BlogBase.Title.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BlogBase.Title.html",
    "title": "Property Title | NewTumblrSharp",
    "summary": "Property Title Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Title The display title of the blog. [JsonProperty(PropertyName = \"title\")] public string Title { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BlogBase.Url.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BlogBase.Url.html",
    "title": "Property Url | NewTumblrSharp",
    "summary": "Property Url Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Url The blog url. [JsonProperty(PropertyName = \"url\")] public string Url { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BlogBase.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BlogBase.html",
    "title": "Class BlogBase | NewTumblrSharp",
    "summary": "Class BlogBase Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Contains common properties for a blog. public class BlogBase Inheritance object BlogBase Derived BlogInfo UserBlogInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties LastUpdated The date and time when the blog was last updated (in local time). Name The short blog name that appears before tumblr.com in a standard blog hostname (and before the domain in a custom blog hostname). Title The display title of the blog. Url The blog url."
  },
  "api/DontPanic.TumblrSharp.Client.BlogInfo.AskPageTitle.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BlogInfo.AskPageTitle.html",
    "title": "Property AskPageTitle | NewTumblrSharp",
    "summary": "Property AskPageTitle Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll AskPageTitle Title from askpage [JsonProperty(PropertyName = \"ask_page_title\")] public string AskPageTitle { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BlogInfo.Description.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BlogInfo.Description.html",
    "title": "Property Description | NewTumblrSharp",
    "summary": "Property Description Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Description The blog's description. [JsonProperty(PropertyName = \"description\")] public string Description { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BlogInfo.IsAdult.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BlogInfo.IsAdult.html",
    "title": "Property IsAdult | NewTumblrSharp",
    "summary": "Property IsAdult Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll IsAdult Blog is marked as adult [JsonProperty(PropertyName = \"is_adult\")] public bool IsAdult { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.BlogInfo.IsAnonAskEnabled.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BlogInfo.IsAnonAskEnabled.html",
    "title": "Property IsAnonAskEnabled | NewTumblrSharp",
    "summary": "Property IsAnonAskEnabled Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll IsAnonAskEnabled Indicates whether the blog allows anonymous questions. Returned only if IsAskEnabled is true. [JsonProperty(PropertyName = \"ask_anon\")] public bool IsAnonAskEnabled { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.BlogInfo.IsAskEnabled.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BlogInfo.IsAskEnabled.html",
    "title": "Property IsAskEnabled | NewTumblrSharp",
    "summary": "Property IsAskEnabled Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll IsAskEnabled Indicates whether the blog allows questions. [JsonProperty(PropertyName = \"ask\")] public bool IsAskEnabled { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.BlogInfo.IsNsfw.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BlogInfo.IsNsfw.html",
    "title": "Property IsNsfw | NewTumblrSharp",
    "summary": "Property IsNsfw Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll IsNsfw Whether the blog is marked as NSFW or not. [JsonProperty(PropertyName = \"is_nsfw\")] public bool IsNsfw { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.BlogInfo.IsOptoutAds.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BlogInfo.IsOptoutAds.html",
    "title": "Property IsOptoutAds | NewTumblrSharp",
    "summary": "Property IsOptoutAds Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll IsOptoutAds IsOptoutAds [JsonProperty(PropertyName = \"is_optout_ads\")] public bool IsOptoutAds { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.BlogInfo.LikesCount.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BlogInfo.LikesCount.html",
    "title": "Property LikesCount | NewTumblrSharp",
    "summary": "Property LikesCount Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll LikesCount Number of likes for this user. Returned only if this is the user's primary blog and sharing of likes is enabled. [JsonProperty(PropertyName = \"likes\")] public long LikesCount { get; set; } Property Value long"
  },
  "api/DontPanic.TumblrSharp.Client.BlogInfo.PostsCount.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BlogInfo.PostsCount.html",
    "title": "Property PostsCount | NewTumblrSharp",
    "summary": "Property PostsCount Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll PostsCount The total number of posts to this blog. [JsonProperty(PropertyName = \"posts\")] public long PostsCount { get; set; } Property Value long"
  },
  "api/DontPanic.TumblrSharp.Client.BlogInfo.ReplyConditions.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BlogInfo.ReplyConditions.html",
    "title": "Property ReplyConditions | NewTumblrSharp",
    "summary": "Property ReplyConditions Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll ReplyConditions Reply conditions [JsonProperty(PropertyName = \"reply_conditions\")] public long ReplyConditions { get; set; } Property Value long"
  },
  "api/DontPanic.TumblrSharp.Client.BlogInfo.ShareLikes.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BlogInfo.ShareLikes.html",
    "title": "Property ShareLikes | NewTumblrSharp",
    "summary": "Property ShareLikes Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll ShareLikes Share likes [JsonProperty(PropertyName = \"share_likes\")] public bool ShareLikes { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.BlogInfo.SubmissionPageTitle.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BlogInfo.SubmissionPageTitle.html",
    "title": "Property SubmissionPageTitle | NewTumblrSharp",
    "summary": "Property SubmissionPageTitle Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll SubmissionPageTitle Title from submissionpage [JsonProperty(PropertyName = \"submission_page_title\")] public string SubmissionPageTitle { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BlogInfo.Subscribed.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BlogInfo.Subscribed.html",
    "title": "Property Subscribed | NewTumblrSharp",
    "summary": "Property Subscribed Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Subscribed Subscribed [JsonProperty(PropertyName = \"subscribed\")] public bool Subscribed { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.BlogInfo.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BlogInfo.html",
    "title": "Class BlogInfo | NewTumblrSharp",
    "summary": "Class BlogInfo Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Contains information about a blog. public class BlogInfo : BlogBase Inheritance object BlogBase BlogInfo Inherited Members BlogBase.Title BlogBase.Name BlogBase.Url BlogBase.LastUpdated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AskPageTitle Title from askpage Description The blog's description. IsAdult Blog is marked as adult IsAnonAskEnabled Indicates whether the blog allows anonymous questions. Returned only if IsAskEnabled is true. IsAskEnabled Indicates whether the blog allows questions. IsNsfw Whether the blog is marked as NSFW or not. IsOptoutAds IsOptoutAds LikesCount Number of likes for this user. Returned only if this is the user's primary blog and sharing of likes is enabled. PostsCount The total number of posts to this blog. ReplyConditions Reply conditions ShareLikes Share likes SubmissionPageTitle Title from submissionpage Subscribed Subscribed"
  },
  "api/DontPanic.TumblrSharp.Client.BoolConverter.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BoolConverter.html",
    "title": "Class BoolConverter | NewTumblrSharp",
    "summary": "Class BoolConverter Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Converts \"Y\" and \"N\" to boolean. public class BoolConverter : JsonConverter Inheritance object JsonConverter BoolConverter Inherited Members JsonConverter.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DontPanic.TumblrSharp.Client.ChatFragment.Label.html": {
    "href": "api/DontPanic.TumblrSharp.Client.ChatFragment.Label.html",
    "title": "Property Label | NewTumblrSharp",
    "summary": "Property Label Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Label The label of the speaker. [JsonProperty(PropertyName = \"label\")] public string Label { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.ChatFragment.Name.html": {
    "href": "api/DontPanic.TumblrSharp.Client.ChatFragment.Name.html",
    "title": "Property Name | NewTumblrSharp",
    "summary": "Property Name Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Name The name of the speaker. [JsonProperty(PropertyName = \"name\")] public string Name { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.ChatFragment.Phrase.html": {
    "href": "api/DontPanic.TumblrSharp.Client.ChatFragment.Phrase.html",
    "title": "Property Phrase | NewTumblrSharp",
    "summary": "Property Phrase Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Phrase The text. [JsonProperty(PropertyName = \"phrase\")] public string Phrase { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.ChatFragment.html": {
    "href": "api/DontPanic.TumblrSharp.Client.ChatFragment.html",
    "title": "Class ChatFragment | NewTumblrSharp",
    "summary": "Class ChatFragment Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents a fragment of a ChatPost. public class ChatFragment Inheritance object ChatFragment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Label The label of the speaker. Name The name of the speaker. Phrase The text."
  },
  "api/DontPanic.TumblrSharp.Client.ChatPost.Body.html": {
    "href": "api/DontPanic.TumblrSharp.Client.ChatPost.Body.html",
    "title": "Property Body | NewTumblrSharp",
    "summary": "Property Body Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Body The full chat body. [JsonProperty(PropertyName = \"body\")] public string Body { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.ChatPost.Dialogue.html": {
    "href": "api/DontPanic.TumblrSharp.Client.ChatPost.Dialogue.html",
    "title": "Property Dialogue | NewTumblrSharp",
    "summary": "Property Dialogue Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Dialogue An array of ChatFragment instances, representing the chat. [JsonProperty(PropertyName = \"dialogue\")] public ChatFragment[] Dialogue { get; set; } Property Value ChatFragment[]"
  },
  "api/DontPanic.TumblrSharp.Client.ChatPost.Title.html": {
    "href": "api/DontPanic.TumblrSharp.Client.ChatPost.Title.html",
    "title": "Property Title | NewTumblrSharp",
    "summary": "Property Title Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Title The optional title of the post. [JsonProperty(PropertyName = \"title\")] public string Title { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.ChatPost.html": {
    "href": "api/DontPanic.TumblrSharp.Client.ChatPost.html",
    "title": "Class ChatPost | NewTumblrSharp",
    "summary": "Class ChatPost Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents a chat post. public class ChatPost : BasePost Inheritance object BasePost ChatPost Inherited Members BasePost.Type BasePost.BlogName BasePost.Id BasePost.Url BasePost.Slug BasePost.Timestamp BasePost.State BasePost.Format BasePost.ReblogKey BasePost.Tags BasePost.ShortUrl BasePost.Summary BasePost.NotesCount BasePost.Notes BasePost.SourceUrl BasePost.SourceTitle BasePost.NumberOfPostsInResponse BasePost.Liked BasePost.IsMobile BasePost.IsBookmarklet BasePost.Reblog BasePost.RebloggedFromId BasePost.RebloggedFromUrl BasePost.RebloggedFromName BasePost.RebloggedFromTitle BasePost.RebloggedRootId BasePost.RebloggedRootUrl BasePost.RebloggedRootName BasePost.RebloggedRootTitle BasePost.Trails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Body The full chat body. Dialogue An array of ChatFragment instances, representing the chat. Title The optional title of the post."
  },
  "api/DontPanic.TumblrSharp.Client.DashboardOption.html": {
    "href": "api/DontPanic.TumblrSharp.Client.DashboardOption.html",
    "title": "Enum DashboardOption | NewTumblrSharp",
    "summary": "Enum DashboardOption Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Option for get dashboardpost, before or after a spezifics Id public enum DashboardOption Fields After = 2 after Before = 1 before"
  },
  "api/DontPanic.TumblrSharp.Client.EnumStringConverter.html": {
    "href": "api/DontPanic.TumblrSharp.Client.EnumStringConverter.html",
    "title": "Class EnumStringConverter | NewTumblrSharp",
    "summary": "Class EnumStringConverter Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Generic converter for enumerations. public class EnumStringConverter : JsonConverter Inheritance object JsonConverter EnumStringConverter Inherited Members JsonConverter.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DontPanic.TumblrSharp.Client.Exif.Aperture.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Exif.Aperture.html",
    "title": "Property Aperture | NewTumblrSharp",
    "summary": "Property Aperture Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Aperture aperture [JsonProperty(\"aperture\")] public string Aperture { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.Exif.Camera.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Exif.Camera.html",
    "title": "Property Camera | NewTumblrSharp",
    "summary": "Property Camera Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Camera camera [JsonProperty(\"camera\")] public string Camera { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.Exif.Exposure.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Exif.Exposure.html",
    "title": "Property Exposure | NewTumblrSharp",
    "summary": "Property Exposure Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Exposure exposure [JsonProperty(\"exposure\")] public string Exposure { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.Exif.FocalLength.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Exif.FocalLength.html",
    "title": "Property FocalLength | NewTumblrSharp",
    "summary": "Property FocalLength Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll FocalLength focallength [JsonProperty(\"focallength\")] public string FocalLength { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.Exif.ISO.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Exif.ISO.html",
    "title": "Property ISO | NewTumblrSharp",
    "summary": "Property ISO Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll ISO iso [JsonProperty(\"iso\")] public int ISO { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.Exif.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Exif.html",
    "title": "Class Exif | NewTumblrSharp",
    "summary": "Class Exif Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Exif public class Exif Inheritance object Exif Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Aperture aperture Camera camera Exposure exposure FocalLength focallength ISO iso"
  },
  "api/DontPanic.TumblrSharp.Client.ExtensionService.UseTumblrClient.html": {
    "href": "api/DontPanic.TumblrSharp.Client.ExtensionService.UseTumblrClient.html",
    "title": "Method UseTumblrClient | NewTumblrSharp",
    "summary": "Method UseTumblrClient Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll UseTumblrClient(IServiceCollection) Configure ServiceCollection for HttpClientFactory public static void UseTumblrClient(this IServiceCollection services) Parameters services IServiceCollection services collection to add httpclient for HttpClientFactory to create internal HttpClient"
  },
  "api/DontPanic.TumblrSharp.Client.ExtensionService.html": {
    "href": "api/DontPanic.TumblrSharp.Client.ExtensionService.html",
    "title": "Class ExtensionService | NewTumblrSharp",
    "summary": "Class ExtensionService Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll extensionclass for IServiceCollection public static class ExtensionService Inheritance object ExtensionService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UseTumblrClient(IServiceCollection) Configure ServiceCollection for HttpClientFactory"
  },
  "api/DontPanic.TumblrSharp.Client.Followers.Count.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Followers.Count.html",
    "title": "Property Count | NewTumblrSharp",
    "summary": "Property Count Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Count The number of users currently following the blog. [JsonProperty(PropertyName = \"total_users\")] public long Count { get; set; } Property Value long"
  },
  "api/DontPanic.TumblrSharp.Client.Followers.LastUpdated.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Followers.LastUpdated.html",
    "title": "Property LastUpdated | NewTumblrSharp",
    "summary": "Property LastUpdated Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll LastUpdated The date and time when the blog was last updated (in local time). [JsonConverter(typeof(TimestampConverter))] [JsonProperty(PropertyName = \"updated\")] public DateTime LastUpdated { get; set; } Property Value DateTime"
  },
  "api/DontPanic.TumblrSharp.Client.Followers.PrimaryBlogUrl.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Followers.PrimaryBlogUrl.html",
    "title": "Property PrimaryBlogUrl | NewTumblrSharp",
    "summary": "Property PrimaryBlogUrl Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll PrimaryBlogUrl The URL of the user's primary blog. [JsonProperty(PropertyName = \"url\")] public string PrimaryBlogUrl { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.Followers.Result.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Followers.Result.html",
    "title": "Property Result | NewTumblrSharp",
    "summary": "Property Result Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Result An array of BlogBase instances, representing information about each user following the blog. [JsonProperty(PropertyName = \"users\")] public BlogBase[] Result { get; set; } Property Value BlogBase[]"
  },
  "api/DontPanic.TumblrSharp.Client.Followers.UserName.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Followers.UserName.html",
    "title": "Property UserName | NewTumblrSharp",
    "summary": "Property UserName Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll UserName The user's name on tumblr. [JsonProperty(PropertyName = \"name\")] public string UserName { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.Followers.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Followers.html",
    "title": "Class Followers | NewTumblrSharp",
    "summary": "Class Followers Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Contains information about a blog's followers. public class Followers Inheritance object Followers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count The number of users currently following the blog. LastUpdated The date and time when the blog was last updated (in local time). PrimaryBlogUrl The URL of the user's primary blog. Result An array of BlogBase instances, representing information about each user following the blog. UserName The user's name on tumblr."
  },
  "api/DontPanic.TumblrSharp.Client.Following.Count.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Following.Count.html",
    "title": "Property Count | NewTumblrSharp",
    "summary": "Property Count Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Count The number of blogs the user is following. [JsonProperty(PropertyName = \"total_blogs\")] public int Count { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.Following.Result.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Following.Result.html",
    "title": "Property Result | NewTumblrSharp",
    "summary": "Property Result Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Result An array of BlogBase instances, representing information about each followed blog. [JsonProperty(PropertyName = \"blogs\")] public BlogBase[] Result { get; set; } Property Value BlogBase[]"
  },
  "api/DontPanic.TumblrSharp.Client.Following.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Following.html",
    "title": "Class Following | NewTumblrSharp",
    "summary": "Class Following Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Contains the blogs that a user is following. public class Following Inheritance object Following Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count The number of blogs the user is following. Result An array of BlogBase instances, representing information about each followed blog."
  },
  "api/DontPanic.TumblrSharp.Client.Likes.Count.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Likes.Count.html",
    "title": "Property Count | NewTumblrSharp",
    "summary": "Property Count Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Count Total number of liked posts. [JsonProperty(PropertyName = \"liked_count\")] public long Count { get; set; } Property Value long"
  },
  "api/DontPanic.TumblrSharp.Client.Likes.Result.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Likes.Result.html",
    "title": "Property Result | NewTumblrSharp",
    "summary": "Property Result Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Result An array of BasePost instances, representing the liked posts. [JsonConverter(typeof(PostArrayConverter))] [JsonProperty(PropertyName = \"liked_posts\")] public BasePost[] Result { get; set; } Property Value BasePost[]"
  },
  "api/DontPanic.TumblrSharp.Client.Likes.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Likes.html",
    "title": "Class Likes | NewTumblrSharp",
    "summary": "Class Likes Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Contains the user's likes. public class Likes Inheritance object Likes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count Total number of liked posts. Result An array of BasePost instances, representing the liked posts."
  },
  "api/DontPanic.TumblrSharp.Client.LinkPost.Description.html": {
    "href": "api/DontPanic.TumblrSharp.Client.LinkPost.Description.html",
    "title": "Property Description | NewTumblrSharp",
    "summary": "Property Description Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Description A user-supplied description. [JsonProperty(PropertyName = \"description\")] public string Description { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.LinkPost.LinkUrl.html": {
    "href": "api/DontPanic.TumblrSharp.Client.LinkPost.LinkUrl.html",
    "title": "Property LinkUrl | NewTumblrSharp",
    "summary": "Property LinkUrl Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll LinkUrl The link. [JsonProperty(PropertyName = \"url\")] public string LinkUrl { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.LinkPost.Title.html": {
    "href": "api/DontPanic.TumblrSharp.Client.LinkPost.Title.html",
    "title": "Property Title | NewTumblrSharp",
    "summary": "Property Title Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Title The title of the page the link points to. [JsonProperty(PropertyName = \"title\")] public string Title { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.LinkPost.html": {
    "href": "api/DontPanic.TumblrSharp.Client.LinkPost.html",
    "title": "Class LinkPost | NewTumblrSharp",
    "summary": "Class LinkPost Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents a link post. public class LinkPost : BasePost Inheritance object BasePost LinkPost Inherited Members BasePost.Type BasePost.BlogName BasePost.Id BasePost.Url BasePost.Slug BasePost.Timestamp BasePost.State BasePost.Format BasePost.ReblogKey BasePost.Tags BasePost.ShortUrl BasePost.Summary BasePost.NotesCount BasePost.Notes BasePost.SourceUrl BasePost.SourceTitle BasePost.NumberOfPostsInResponse BasePost.Liked BasePost.IsMobile BasePost.IsBookmarklet BasePost.Reblog BasePost.RebloggedFromId BasePost.RebloggedFromUrl BasePost.RebloggedFromName BasePost.RebloggedFromTitle BasePost.RebloggedRootId BasePost.RebloggedRootUrl BasePost.RebloggedRootName BasePost.RebloggedRootTitle BasePost.Trails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description A user-supplied description. LinkUrl The link. Title The title of the page the link points to."
  },
  "api/DontPanic.TumblrSharp.Client.NoteConverter.html": {
    "href": "api/DontPanic.TumblrSharp.Client.NoteConverter.html",
    "title": "Class NoteConverter | NewTumblrSharp",
    "summary": "Class NoteConverter Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll convert note public class NoteConverter : JsonConverter Inheritance object JsonConverter NoteConverter Inherited Members JsonConverter.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DontPanic.TumblrSharp.Client.Photo.AlternateSizes.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Photo.AlternateSizes.html",
    "title": "Property AlternateSizes | NewTumblrSharp",
    "summary": "Property AlternateSizes Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll AlternateSizes An array of PhotoInfo instances for alternate (thumbnail) versions of the photo. [JsonProperty(\"alt_sizes\")] public PhotoInfo[] AlternateSizes { get; set; } Property Value PhotoInfo[]"
  },
  "api/DontPanic.TumblrSharp.Client.Photo.Caption.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Photo.Caption.html",
    "title": "Property Caption | NewTumblrSharp",
    "summary": "Property Caption Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Caption User supplied caption for the individual photo (Photosets only). [JsonProperty(\"caption\")] public string Caption { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.Photo.Exif.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Photo.Exif.html",
    "title": "Property Exif | NewTumblrSharp",
    "summary": "Property Exif Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Exif Exif-Data from Photo [JsonProperty(\"exif\")] public Exif Exif { get; set; } Property Value Exif"
  },
  "api/DontPanic.TumblrSharp.Client.Photo.OriginalSize.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Photo.OriginalSize.html",
    "title": "Property OriginalSize | NewTumblrSharp",
    "summary": "Property OriginalSize Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll OriginalSize A PhotoInfo instance representing the details of the full-size photo. [JsonProperty(\"original_size\")] public PhotoInfo OriginalSize { get; set; } Property Value PhotoInfo"
  },
  "api/DontPanic.TumblrSharp.Client.Photo.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Photo.html",
    "title": "Class Photo | NewTumblrSharp",
    "summary": "Class Photo Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents a photo in a PhotoPost. public class Photo Inheritance object Photo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AlternateSizes An array of PhotoInfo instances for alternate (thumbnail) versions of the photo. Caption User supplied caption for the individual photo (Photosets only). Exif Exif-Data from Photo OriginalSize A PhotoInfo instance representing the details of the full-size photo."
  },
  "api/DontPanic.TumblrSharp.Client.PhotoInfo.Height.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PhotoInfo.Height.html",
    "title": "Property Height | NewTumblrSharp",
    "summary": "Property Height Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Height The photo height, in pixels. [JsonProperty(\"height\")] public int Height { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.PhotoInfo.ImageUrl.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PhotoInfo.ImageUrl.html",
    "title": "Property ImageUrl | NewTumblrSharp",
    "summary": "Property ImageUrl Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll ImageUrl The url of the photo. [JsonProperty(\"url\")] public string ImageUrl { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.PhotoInfo.Width.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PhotoInfo.Width.html",
    "title": "Property Width | NewTumblrSharp",
    "summary": "Property Width Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Width The photo width, in pixels. [JsonProperty(\"width\")] public int Width { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.PhotoInfo.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PhotoInfo.html",
    "title": "Class PhotoInfo | NewTumblrSharp",
    "summary": "Class PhotoInfo Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents information about a Photo. public class PhotoInfo Inheritance object PhotoInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Height The photo height, in pixels. ImageUrl The url of the photo. Width The photo width, in pixels."
  },
  "api/DontPanic.TumblrSharp.Client.PhotoPost.Caption.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PhotoPost.Caption.html",
    "title": "Property Caption | NewTumblrSharp",
    "summary": "Property Caption Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Caption The user-supplied caption. [JsonProperty(\"caption\")] public string Caption { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.PhotoPost.Photo.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PhotoPost.Photo.html",
    "title": "Property Photo | NewTumblrSharp",
    "summary": "Property Photo Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Photo Gets the main (or only, for photo posts with only one picture) photo for the post. public Photo Photo { get; } Property Value Photo"
  },
  "api/DontPanic.TumblrSharp.Client.PhotoPost.PhotoSet.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PhotoPost.PhotoSet.html",
    "title": "Property PhotoSet | NewTumblrSharp",
    "summary": "Property PhotoSet Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll PhotoSet An array of Photo instances. [JsonProperty(\"photos\")] public Photo[] PhotoSet { get; set; } Property Value Photo[]"
  },
  "api/DontPanic.TumblrSharp.Client.PhotoPost.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PhotoPost.html",
    "title": "Class PhotoPost | NewTumblrSharp",
    "summary": "Class PhotoPost Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents a photo post. public class PhotoPost : BasePost Inheritance object BasePost PhotoPost Inherited Members BasePost.Type BasePost.BlogName BasePost.Id BasePost.Url BasePost.Slug BasePost.Timestamp BasePost.State BasePost.Format BasePost.ReblogKey BasePost.Tags BasePost.ShortUrl BasePost.Summary BasePost.NotesCount BasePost.Notes BasePost.SourceUrl BasePost.SourceTitle BasePost.NumberOfPostsInResponse BasePost.Liked BasePost.IsMobile BasePost.IsBookmarklet BasePost.Reblog BasePost.RebloggedFromId BasePost.RebloggedFromUrl BasePost.RebloggedFromName BasePost.RebloggedFromTitle BasePost.RebloggedRootId BasePost.RebloggedRootUrl BasePost.RebloggedRootName BasePost.RebloggedRootTitle BasePost.Trails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Caption The user-supplied caption. Photo Gets the main (or only, for photo posts with only one picture) photo for the post. PhotoSet An array of Photo instances."
  },
  "api/DontPanic.TumblrSharp.Client.Player.EmbedCode.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Player.EmbedCode.html",
    "title": "Property EmbedCode | NewTumblrSharp",
    "summary": "Property EmbedCode Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll EmbedCode The HTML code for embedding the video. [JsonProperty(\"embed_code\")] public string EmbedCode { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.Player.Width.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Player.Width.html",
    "title": "Property Width | NewTumblrSharp",
    "summary": "Property Width Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Width The width of the player. [JsonProperty(\"width\")] public int Width { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.Player.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Player.html",
    "title": "Class Player | NewTumblrSharp",
    "summary": "Class Player Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents an embeddable player for a video in a VideoPost. public class Player Inheritance object Player Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EmbedCode The HTML code for embedding the video. Width The width of the player."
  },
  "api/DontPanic.TumblrSharp.Client.PostArrayConverter.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PostArrayConverter.html",
    "title": "Class PostArrayConverter | NewTumblrSharp",
    "summary": "Class PostArrayConverter Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Converts post objects to the proper post type. public class PostArrayConverter : JsonConverter Inheritance object JsonConverter PostArrayConverter Inherited Members JsonConverter.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DontPanic.TumblrSharp.Client.PostAttributionNote.Photo_height.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PostAttributionNote.Photo_height.html",
    "title": "Property Photo_height | NewTumblrSharp",
    "summary": "Property Photo_height Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Photo_height Photo_height public int Photo_height { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.PostAttributionNote.Photo_url.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PostAttributionNote.Photo_url.html",
    "title": "Property Photo_url | NewTumblrSharp",
    "summary": "Property Photo_url Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Photo_url Photo_url public string Photo_url { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.PostAttributionNote.Photo_width.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PostAttributionNote.Photo_width.html",
    "title": "Property Photo_width | NewTumblrSharp",
    "summary": "Property Photo_width Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Photo_width Photo_width public int Photo_width { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.PostAttributionNote.Post_attribution_type.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PostAttributionNote.Post_attribution_type.html",
    "title": "Property Post_attribution_type | NewTumblrSharp",
    "summary": "Property Post_attribution_type Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Post_attribution_type post_attribution_type public string Post_attribution_type { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.PostAttributionNote.Post_attribution_type_name.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PostAttributionNote.Post_attribution_type_name.html",
    "title": "Property Post_attribution_type_name | NewTumblrSharp",
    "summary": "Property Post_attribution_type_name Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Post_attribution_type_name post_attribution_type_name public string Post_attribution_type_name { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.PostAttributionNote.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PostAttributionNote.html",
    "title": "Class PostAttributionNote | NewTumblrSharp",
    "summary": "Class PostAttributionNote Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll PostAttributionNote public class PostAttributionNote : BaseNote Inheritance object BaseNote PostAttributionNote Inherited Members BaseNote.Type BaseNote.Timestamp BaseNote.BlogName BaseNote.BlogUuid BaseNote.BlogUrl BaseNote.Followed BaseNote.AvatarShape BaseNote.ReplyText BaseNote.PostId BaseNote.ReblogParentBlogName BaseNote.Equals(object) BaseNote.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Photo_height Photo_height Photo_url Photo_url Photo_width Photo_width Post_attribution_type post_attribution_type Post_attribution_type_name post_attribution_type_name"
  },
  "api/DontPanic.TumblrSharp.Client.PostCreationInfo.PostId.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PostCreationInfo.PostId.html",
    "title": "Property PostId | NewTumblrSharp",
    "summary": "Property PostId Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll PostId The identifier of the post. [JsonProperty(\"id\")] public long PostId { get; set; } Property Value long"
  },
  "api/DontPanic.TumblrSharp.Client.PostCreationInfo.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PostCreationInfo.html",
    "title": "Class PostCreationInfo | NewTumblrSharp",
    "summary": "Class PostCreationInfo Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents information about a newly created post. public class PostCreationInfo Inheritance object PostCreationInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PostId The identifier of the post."
  },
  "api/DontPanic.TumblrSharp.Client.Posts.Blog.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Posts.Blog.html",
    "title": "Property Blog | NewTumblrSharp",
    "summary": "Property Blog Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Blog A BlogInfo instance representing information about the blog for which the posts are being retrieved. [JsonProperty(PropertyName = \"blog\")] public BlogInfo Blog { get; set; } Property Value BlogInfo"
  },
  "api/DontPanic.TumblrSharp.Client.Posts.Result.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Posts.Result.html",
    "title": "Property Result | NewTumblrSharp",
    "summary": "Property Result Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Result An array of BasePost instances, containing the blog's posts. [JsonConverter(typeof(PostArrayConverter))] [JsonProperty(PropertyName = \"posts\")] public BasePost[] Result { get; set; } Property Value BasePost[]"
  },
  "api/DontPanic.TumblrSharp.Client.Posts.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Posts.html",
    "title": "Class Posts | NewTumblrSharp",
    "summary": "Class Posts Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Contains information about a blog's posts. public class Posts Inheritance object Posts Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Blog A BlogInfo instance representing information about the blog for which the posts are being retrieved. Result An array of BasePost instances, containing the blog's posts."
  },
  "api/DontPanic.TumblrSharp.Client.QuotePost.Source.html": {
    "href": "api/DontPanic.TumblrSharp.Client.QuotePost.Source.html",
    "title": "Property Source | NewTumblrSharp",
    "summary": "Property Source Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Source Full HTML for the source of the quote. [JsonProperty(PropertyName = \"source\")] public string Source { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.QuotePost.Text.html": {
    "href": "api/DontPanic.TumblrSharp.Client.QuotePost.Text.html",
    "title": "Property Text | NewTumblrSharp",
    "summary": "Property Text Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Text The text of the quote. [JsonProperty(PropertyName = \"text\")] public string Text { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.QuotePost.html": {
    "href": "api/DontPanic.TumblrSharp.Client.QuotePost.html",
    "title": "Class QuotePost | NewTumblrSharp",
    "summary": "Class QuotePost Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents a quote post. public class QuotePost : BasePost Inheritance object BasePost QuotePost Inherited Members BasePost.Type BasePost.BlogName BasePost.Id BasePost.Url BasePost.Slug BasePost.Timestamp BasePost.State BasePost.Format BasePost.ReblogKey BasePost.Tags BasePost.ShortUrl BasePost.Summary BasePost.NotesCount BasePost.Notes BasePost.SourceUrl BasePost.SourceTitle BasePost.NumberOfPostsInResponse BasePost.Liked BasePost.IsMobile BasePost.IsBookmarklet BasePost.Reblog BasePost.RebloggedFromId BasePost.RebloggedFromUrl BasePost.RebloggedFromName BasePost.RebloggedFromTitle BasePost.RebloggedRootId BasePost.RebloggedRootUrl BasePost.RebloggedRootName BasePost.RebloggedRootTitle BasePost.Trails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Source Full HTML for the source of the quote. Text The text of the quote."
  },
  "api/DontPanic.TumblrSharp.Client.Reblog.Comment.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Reblog.Comment.html",
    "title": "Property Comment | NewTumblrSharp",
    "summary": "Property Comment Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Comment Comment [JsonProperty(PropertyName = \"comment\")] public string Comment { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.Reblog.TreeHtml.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Reblog.TreeHtml.html",
    "title": "Property TreeHtml | NewTumblrSharp",
    "summary": "Property TreeHtml Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll TreeHtml Tree Html [JsonProperty(PropertyName = \"tree_html\")] public string TreeHtml { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.Reblog.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Reblog.html",
    "title": "Class Reblog | NewTumblrSharp",
    "summary": "Class Reblog Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll reblog public class Reblog Inheritance object Reblog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Comment Comment TreeHtml Tree Html"
  },
  "api/DontPanic.TumblrSharp.Client.TextPost.Body.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TextPost.Body.html",
    "title": "Property Body | NewTumblrSharp",
    "summary": "Property Body Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Body The full post body. [JsonProperty(PropertyName = \"body\")] public string Body { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.TextPost.Title.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TextPost.Title.html",
    "title": "Property Title | NewTumblrSharp",
    "summary": "Property Title Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Title The optional title of the post. [JsonProperty(PropertyName = \"title\")] public string Title { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.TextPost.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TextPost.html",
    "title": "Class TextPost | NewTumblrSharp",
    "summary": "Class TextPost Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents a text post. public class TextPost : BasePost Inheritance object BasePost TextPost Inherited Members BasePost.Type BasePost.BlogName BasePost.Id BasePost.Url BasePost.Slug BasePost.Timestamp BasePost.State BasePost.Format BasePost.ReblogKey BasePost.Tags BasePost.ShortUrl BasePost.Summary BasePost.NotesCount BasePost.Notes BasePost.SourceUrl BasePost.SourceTitle BasePost.NumberOfPostsInResponse BasePost.Liked BasePost.IsMobile BasePost.IsBookmarklet BasePost.Reblog BasePost.RebloggedFromId BasePost.RebloggedFromUrl BasePost.RebloggedFromName BasePost.RebloggedFromTitle BasePost.RebloggedRootId BasePost.RebloggedRootUrl BasePost.RebloggedRootName BasePost.RebloggedRootTitle BasePost.Trails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Body The full post body. Title The optional title of the post."
  },
  "api/DontPanic.TumblrSharp.Client.TimestampConverter.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TimestampConverter.html",
    "title": "Class TimestampConverter | NewTumblrSharp",
    "summary": "Class TimestampConverter Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Converts a timestamp to a DateTime. public class TimestampConverter : JsonConverter Inheritance object JsonConverter TimestampConverter Inherited Members JsonConverter.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DontPanic.TumblrSharp.Client.Trail.Blog.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Trail.Blog.html",
    "title": "Property Blog | NewTumblrSharp",
    "summary": "Property Blog Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Blog the blog [JsonProperty(PropertyName = \"blog\")] public TrailBlog Blog { get; set; } Property Value TrailBlog"
  },
  "api/DontPanic.TumblrSharp.Client.Trail.Content.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Trail.Content.html",
    "title": "Property Content | NewTumblrSharp",
    "summary": "Property Content Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Content Content [JsonProperty(PropertyName = \"content\")] public string Content { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.Trail.ContentRaw.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Trail.ContentRaw.html",
    "title": "Property ContentRaw | NewTumblrSharp",
    "summary": "Property ContentRaw Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll ContentRaw ContentRaw [JsonProperty(PropertyName = \"content_raw\")] public string ContentRaw { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.Trail.Equals.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Trail.Equals.html",
    "title": "Method Equals | NewTumblrSharp",
    "summary": "Method Equals Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool"
  },
  "api/DontPanic.TumblrSharp.Client.Trail.GetHashCode.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Trail.GetHashCode.html",
    "title": "Method GetHashCode | NewTumblrSharp",
    "summary": "Method GetHashCode Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll GetHashCode() public override int GetHashCode() Returns int"
  },
  "api/DontPanic.TumblrSharp.Client.Trail.Post.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Trail.Post.html",
    "title": "Property Post | NewTumblrSharp",
    "summary": "Property Post Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Post the post that trail [JsonProperty(PropertyName = \"post\")] public TrailPost Post { get; set; } Property Value TrailPost"
  },
  "api/DontPanic.TumblrSharp.Client.Trail.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Trail.html",
    "title": "Class Trail | NewTumblrSharp",
    "summary": "Class Trail Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Trail public class Trail Inheritance object Trail Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Blog the blog Content Content ContentRaw ContentRaw Post the post that trail Methods Equals(object) GetHashCode()"
  },
  "api/DontPanic.TumblrSharp.Client.TrailBlog.Active.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailBlog.Active.html",
    "title": "Property Active | NewTumblrSharp",
    "summary": "Property Active Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Active is Blog active [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"active\")] public bool Active { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.TrailBlog.CanBeFollowed.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailBlog.CanBeFollowed.html",
    "title": "Property CanBeFollowed | NewTumblrSharp",
    "summary": "Property CanBeFollowed Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll CanBeFollowed can be followed [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"can_be_followed\")] public bool CanBeFollowed { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.TrailBlog.Equals.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailBlog.Equals.html",
    "title": "Method Equals | NewTumblrSharp",
    "summary": "Method Equals Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Equals(object) Compare a trailblog with another public override bool Equals(object obj) Parameters obj object Object to be equals Returns bool bool"
  },
  "api/DontPanic.TumblrSharp.Client.TrailBlog.GetHashCode.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailBlog.GetHashCode.html",
    "title": "Method GetHashCode | NewTumblrSharp",
    "summary": "Method GetHashCode Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll GetHashCode() return a hash code public override int GetHashCode() Returns int hashcode as int"
  },
  "api/DontPanic.TumblrSharp.Client.TrailBlog.Name.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailBlog.Name.html",
    "title": "Property Name | NewTumblrSharp",
    "summary": "Property Name Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Name the name of the blog [JsonProperty(PropertyName = \"name\")] public string Name { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.TrailBlog.ShareFollowing.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailBlog.ShareFollowing.html",
    "title": "Property ShareFollowing | NewTumblrSharp",
    "summary": "Property ShareFollowing Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll ShareFollowing share following [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"share_following\")] public bool ShareFollowing { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.TrailBlog.ShareLikes.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailBlog.ShareLikes.html",
    "title": "Property ShareLikes | NewTumblrSharp",
    "summary": "Property ShareLikes Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll ShareLikes share likes [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"share_likes\")] public bool ShareLikes { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.TrailBlog.Theme.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailBlog.Theme.html",
    "title": "Property Theme | NewTumblrSharp",
    "summary": "Property Theme Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Theme theme of the blog [JsonConverter(typeof(TrailThemeConverter))] [JsonProperty(PropertyName = \"theme\")] public TrailTheme Theme { get; set; } Property Value TrailTheme"
  },
  "api/DontPanic.TumblrSharp.Client.TrailBlog.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailBlog.html",
    "title": "Class TrailBlog | NewTumblrSharp",
    "summary": "Class TrailBlog Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll The blog from Trail public class TrailBlog Inheritance object TrailBlog Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Active is Blog active CanBeFollowed can be followed Name the name of the blog ShareFollowing share following ShareLikes share likes Theme theme of the blog Methods Equals(object) Compare a trailblog with another GetHashCode() return a hash code"
  },
  "api/DontPanic.TumblrSharp.Client.TrailConverter.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailConverter.html",
    "title": "Class TrailConverter | NewTumblrSharp",
    "summary": "Class TrailConverter Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll convert trail public class TrailConverter : JsonConverter Inheritance object JsonConverter TrailConverter Inherited Members JsonConverter.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DontPanic.TumblrSharp.Client.TrailPost.Equals.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailPost.Equals.html",
    "title": "Method Equals | NewTumblrSharp",
    "summary": "Method Equals Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Equals(object) compare trailposts public override bool Equals(object obj) Parameters obj object to compare object Returns bool true for obj is equal"
  },
  "api/DontPanic.TumblrSharp.Client.TrailPost.GetHashCode.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailPost.GetHashCode.html",
    "title": "Method GetHashCode | NewTumblrSharp",
    "summary": "Method GetHashCode Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll GetHashCode() hash code for a trailpost public override int GetHashCode() Returns int hashcode"
  },
  "api/DontPanic.TumblrSharp.Client.TrailPost.Id.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailPost.Id.html",
    "title": "Property Id | NewTumblrSharp",
    "summary": "Property Id Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Id id from post [JsonProperty(PropertyName = \"id\")] public long Id { get; set; } Property Value long"
  },
  "api/DontPanic.TumblrSharp.Client.TrailPost.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailPost.html",
    "title": "Class TrailPost | NewTumblrSharp",
    "summary": "Class TrailPost Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll post object from Trail public class TrailPost Inheritance object TrailPost Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id id from post Methods Equals(object) compare trailposts GetHashCode() hash code for a trailpost"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.AvatarShape.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.AvatarShape.html",
    "title": "Property AvatarShape | NewTumblrSharp",
    "summary": "Property AvatarShape Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll AvatarShape avatarshape [JsonProperty(PropertyName = \"avatar_shape\")] public AvatarShape AvatarShape { get; set; } Property Value AvatarShape"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.BackgroundColor.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.BackgroundColor.html",
    "title": "Property BackgroundColor | NewTumblrSharp",
    "summary": "Property BackgroundColor Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll BackgroundColor Backgroundcolor [JsonProperty(PropertyName = \"background_color\")] public Color BackgroundColor { get; set; } Property Value Color"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.BodyFont.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.BodyFont.html",
    "title": "Property BodyFont | NewTumblrSharp",
    "summary": "Property BodyFont Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll BodyFont font of the body [JsonProperty(PropertyName = \"body_font\")] public string BodyFont { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.Equals.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.Equals.html",
    "title": "Method Equals | NewTumblrSharp",
    "summary": "Method Equals Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Equals(object) compare this object with another public override bool Equals(object obj) Parameters obj object Object to be equals Returns bool"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.GetHashCode.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.GetHashCode.html",
    "title": "Method GetHashCode | NewTumblrSharp",
    "summary": "Method GetHashCode Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll GetHashCode() return a hash code public override int GetHashCode() Returns int hashcode as int"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.HeaderBounds.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.HeaderBounds.html",
    "title": "Property HeaderBounds | NewTumblrSharp",
    "summary": "Property HeaderBounds Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll HeaderBounds bounds of the header [JsonProperty(PropertyName = \"header_bounds\")] public string HeaderBounds { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.HeaderFocusHeight.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.HeaderFocusHeight.html",
    "title": "Property HeaderFocusHeight | NewTumblrSharp",
    "summary": "Property HeaderFocusHeight Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll HeaderFocusHeight focus height of the header [JsonProperty(PropertyName = \"header_focus_height\")] public int HeaderFocusHeight { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.HeaderFocusWidth.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.HeaderFocusWidth.html",
    "title": "Property HeaderFocusWidth | NewTumblrSharp",
    "summary": "Property HeaderFocusWidth Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll HeaderFocusWidth focus width of the header [JsonProperty(PropertyName = \"header_focus_width\")] public int HeaderFocusWidth { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.HeaderFullHeight.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.HeaderFullHeight.html",
    "title": "Property HeaderFullHeight | NewTumblrSharp",
    "summary": "Property HeaderFullHeight Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll HeaderFullHeight full height of the header [JsonProperty(PropertyName = \"header_full_height\")] public int HeaderFullHeight { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.HeaderFullWidth.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.HeaderFullWidth.html",
    "title": "Property HeaderFullWidth | NewTumblrSharp",
    "summary": "Property HeaderFullWidth Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll HeaderFullWidth full width of the header [JsonProperty(PropertyName = \"header_full_width\")] public int HeaderFullWidth { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.HeaderImage.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.HeaderImage.html",
    "title": "Property HeaderImage | NewTumblrSharp",
    "summary": "Property HeaderImage Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll HeaderImage image from the header [JsonProperty(PropertyName = \"header_image\")] public string HeaderImage { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.HeaderImageFocused.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.HeaderImageFocused.html",
    "title": "Property HeaderImageFocused | NewTumblrSharp",
    "summary": "Property HeaderImageFocused Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll HeaderImageFocused focused image from the header [JsonProperty(PropertyName = \"header_image_focused\")] public string HeaderImageFocused { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.HeaderImageScaled.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.HeaderImageScaled.html",
    "title": "Property HeaderImageScaled | NewTumblrSharp",
    "summary": "Property HeaderImageScaled Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll HeaderImageScaled scaled image from the header [JsonProperty(PropertyName = \"header_image_scaled\")] public string HeaderImageScaled { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.HeaderStretch.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.HeaderStretch.html",
    "title": "Property HeaderStretch | NewTumblrSharp",
    "summary": "Property HeaderStretch Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll HeaderStretch is the header stretched [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"header_stretch\")] public bool HeaderStretch { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.LinkColor.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.LinkColor.html",
    "title": "Property LinkColor | NewTumblrSharp",
    "summary": "Property LinkColor Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll LinkColor color of link [JsonProperty(PropertyName = \"link_color\")] public Color LinkColor { get; set; } Property Value Color"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.ShowAvatar.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.ShowAvatar.html",
    "title": "Property ShowAvatar | NewTumblrSharp",
    "summary": "Property ShowAvatar Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll ShowAvatar show the avatar [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"show_avatar\")] public bool ShowAvatar { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.ShowDescription.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.ShowDescription.html",
    "title": "Property ShowDescription | NewTumblrSharp",
    "summary": "Property ShowDescription Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll ShowDescription show the description [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"show_description\")] public bool ShowDescription { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.ShowHeaderImage.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.ShowHeaderImage.html",
    "title": "Property ShowHeaderImage | NewTumblrSharp",
    "summary": "Property ShowHeaderImage Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll ShowHeaderImage show headerimage [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"show_header_image\")] public bool ShowHeaderImage { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.ShowTitle.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.ShowTitle.html",
    "title": "Property ShowTitle | NewTumblrSharp",
    "summary": "Property ShowTitle Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll ShowTitle show title [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"show_title\")] public bool ShowTitle { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.TitleColor.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.TitleColor.html",
    "title": "Property TitleColor | NewTumblrSharp",
    "summary": "Property TitleColor Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll TitleColor color of the title [JsonProperty(PropertyName = \"title_color\")] public Color TitleColor { get; set; } Property Value Color"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.TitleFont.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.TitleFont.html",
    "title": "Property TitleFont | NewTumblrSharp",
    "summary": "Property TitleFont Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll TitleFont font of the title [JsonProperty(PropertyName = \"title_font\")] public string TitleFont { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.TitleFontWeight.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.TitleFontWeight.html",
    "title": "Property TitleFontWeight | NewTumblrSharp",
    "summary": "Property TitleFontWeight Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll TitleFontWeight weight of the font from title [JsonProperty(PropertyName = \"title_font_weight\")] public string TitleFontWeight { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.html",
    "title": "Class TrailTheme | NewTumblrSharp",
    "summary": "Class TrailTheme Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll theme of a blog see Theme public class TrailTheme Inheritance object TrailTheme Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AvatarShape avatarshape BackgroundColor Backgroundcolor BodyFont font of the body HeaderBounds bounds of the header HeaderFocusHeight focus height of the header HeaderFocusWidth focus width of the header HeaderFullHeight full height of the header HeaderFullWidth full width of the header HeaderImage image from the header HeaderImageFocused focused image from the header HeaderImageScaled scaled image from the header HeaderStretch is the header stretched LinkColor color of link ShowAvatar show the avatar ShowDescription show the description ShowHeaderImage show headerimage ShowTitle show title TitleColor color of the title TitleFont font of the title TitleFontWeight weight of the font from title Methods Equals(object) compare this object with another GetHashCode() return a hash code"
  },
  "api/DontPanic.TumblrSharp.Client.TrailThemeConverter.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailThemeConverter.html",
    "title": "Class TrailThemeConverter | NewTumblrSharp",
    "summary": "Class TrailThemeConverter Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Converter for trail theme public class TrailThemeConverter : JsonConverter Inheritance object JsonConverter TrailThemeConverter Inherited Members JsonConverter.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.-ctor.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.-ctor.html",
    "title": "Constructor TumblrClient | NewTumblrSharp",
    "summary": "Constructor TumblrClient Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll TumblrClient(IHmacSha1HashProvider, string, string, Token) Initializes a new instance of the TumblrClient class. public TumblrClient(IHmacSha1HashProvider hashProvider, string consumerKey, string consumerSecret, Token oAuthToken = null) Parameters hashProvider IHmacSha1HashProvider A IHmacSha1HashProvider implementation used to generate a HMAC-SHA1 hash for OAuth purposes. consumerKey string The consumer key. consumerSecret string The consumer secret. oAuthToken Token An optional access token for the API. If no access token is provided, only the methods that do not require OAuth can be invoked successfully. Remarks You can get a consumer key and a consumer secret by registering an application with Tumblr: http://www.tumblr.com/oauth/apps platform: .Net Standard 1.1+, .Net Core 2.2+ TumblrClient(IHttpClientFactory, IHmacSha1HashProvider, string, string, Token) Initializes a new instance of the TumblrClient class. public TumblrClient(IHttpClientFactory httpClientFactory, IHmacSha1HashProvider hashProvider, string consumerKey, string consumerSecret, Token oAuthToken = null) Parameters httpClientFactory IHttpClientFactory HttpClientFactory to create internal HttpClient hashProvider IHmacSha1HashProvider A IHmacSha1HashProvider implementation used to generate a HMAC-SHA1 hash for OAuth purposes. consumerKey string The consumer key. consumerSecret string The consumer secret. oAuthToken Token An optional access token for the API. If no access token is provided, only the methods that do not require OAuth can be invoked successfully. Remarks You can get a consumer key and a consumer secret by registering an application with Tumblr App-Registration: http://www.tumblr.com/oauth/apps platform: .Net Standard 2.0+, .Net Core 2.2+"
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.CreatePostAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.CreatePostAsync.html",
    "title": "Method CreatePostAsync | NewTumblrSharp",
    "summary": "Method CreatePostAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll CreatePostAsync(string, PostData) Asynchronously creates a new post. public Task<PostCreationInfo> CreatePostAsync(string blogName, PostData postData) Parameters blogName string The name of the blog where to post to (must be one of the current user's blogs). postData PostData The data that represents the type of post to create. See PostData for how to create various post types. Returns Task<PostCreationInfo> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a PostCreationInfo instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#posting Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. postData is null. ArgumentException blogName is empty. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. CreatePostAsync(string, PostData, CancellationToken) Asynchronously creates a new post. public Task<PostCreationInfo> CreatePostAsync(string blogName, PostData postData, CancellationToken cancellationToken) Parameters blogName string The name of the blog where to post to (must be one of the current user's blogs). postData PostData The data that represents the type of post to create. See PostData for how to create various post types. cancellationToken CancellationToken A CancellationToken that can be used to cancel the operation. Returns Task<PostCreationInfo> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a PostCreationInfo instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#posting Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. postData is null. ArgumentException blogName is empty. InvalidOperationException This TumblrClient instance does not have an OAuth token specified."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.DeletePostAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.DeletePostAsync.html",
    "title": "Method DeletePostAsync | NewTumblrSharp",
    "summary": "Method DeletePostAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll DeletePostAsync(string, long) Asynchronously deletes a post. public Task DeletePostAsync(string blogName, long postId) Parameters blogName string The name of the blog to which the post to delete belongs. postId long The identifier of the post to delete. Returns Task A Task that can be used to track the operation. If the task fails, Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#deleting-posts Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. ArgumentException blogName is empty. ArgumentOutOfRangeException postId is less than 0. InvalidOperationException This TumblrClient instance does not have an OAuth token specified."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.Dispose.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.Dispose.html",
    "title": "Method Dispose | NewTumblrSharp",
    "summary": "Method Dispose Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Dispose(bool) Disposes of the object. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources have to be disposed; otherwise false."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.EditPostAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.EditPostAsync.html",
    "title": "Method EditPostAsync | NewTumblrSharp",
    "summary": "Method EditPostAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll EditPostAsync(string, long, PostData) Asynchronously edits an existing post. public Task<PostCreationInfo> EditPostAsync(string blogName, long postId, PostData postData) Parameters blogName string The name of the blog where the post to edit is (must be one of the current user's blogs). postId long The identifier of the post to edit. postData PostData The data that represents the updated information for the post. See PostData for how to create various post types. Returns Task<PostCreationInfo> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a PostCreationInfo instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#editing Exceptions ArgumentNullException blogName is null. postData is null. ArgumentException blogName is empty. postId is less than 0. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. EditPostAsync(string, long, PostData, CancellationToken) Asynchronously edits an existing post. public Task<PostCreationInfo> EditPostAsync(string blogName, long postId, PostData postData, CancellationToken cancellationToken) Parameters blogName string The name of the blog where the post to edit is (must be one of the current user's blogs). postId long The identifier of the post to edit. postData PostData The data that represents the updated information for the post. See PostData for how to create various post types. cancellationToken CancellationToken A CancellationToken that can be used to cancel the operation. Returns Task<PostCreationInfo> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a PostCreationInfo instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#editing Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. postData is null. ArgumentException blogName is empty. postId is less than 0. InvalidOperationException This TumblrClient instance does not have an OAuth token specified."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.FollowAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.FollowAsync.html",
    "title": "Method FollowAsync | NewTumblrSharp",
    "summary": "Method FollowAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll FollowAsync(string) Asynchronously follows a blog. public Task FollowAsync(string blogUrl) Parameters blogUrl string The url of the blog to follow. Returns Task A Task that can be used to track the operation. If the task fails, Exception will carry a TumblrException Remarks See: http://www.tumblr.com/docs/en/api/v2#m-up-follow Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogUrl is null. ArgumentException blogUrl is empty. InvalidOperationException This TumblrClient instance does not have an OAuth token specified."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.GetBlogInfoAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.GetBlogInfoAsync.html",
    "title": "Method GetBlogInfoAsync | NewTumblrSharp",
    "summary": "Method GetBlogInfoAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll GetBlogInfoAsync(string) Asynchronously retrieves general information about the blog, such as the title, number of posts, and other high-level data. public Task<BlogInfo> GetBlogInfoAsync(string blogName) Parameters blogName string The name of the blog. Returns Task<BlogInfo> A Task<BlogInfo> that can be used to track the operation. If the task succeeds, the Result will carry a BlogInfo instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#blog-info. Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. ArgumentException blogName is empty."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.GetBlogLikesAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.GetBlogLikesAsync.html",
    "title": "Method GetBlogLikesAsync | NewTumblrSharp",
    "summary": "Method GetBlogLikesAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll GetBlogLikesAsync(string, int, int, DateTime?, DateTime?) Asynchronously retrieves the publicly exposed likes from a blog. public Task<Likes> GetBlogLikesAsync(string blogName, int startIndex = 0, int count = 20, DateTime? before = null, DateTime? after = null) Parameters blogName string The name of the blog. startIndex int The offset at which to start retrieving the likes. Use 0 to start retrieving from the latest like. count int The number of likes to retrieve. Must be between 1 and 20. before DateTime? The timestamp before when to retrieve likes. after DateTime? The timestamp after when to retrieve likes. Returns Task<Likes> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a Likes instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#blog-likes Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. ArgumentException blogName is empty. ArgumentOutOfRangeException startIndex is less than 0. count is less than 1 or greater than 20."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.GetDashboardPostsAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.GetDashboardPostsAsync.html",
    "title": "Method GetDashboardPostsAsync | NewTumblrSharp",
    "summary": "Method GetDashboardPostsAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll GetDashboardPostsAsync(long, long, int, PostType, bool, bool) Asynchronously retrieves posts from the current user's dashboard. public Task<BasePost[]> GetDashboardPostsAsync(long sinceId = 0, long startIndex = 0, int count = 20, PostType type = PostType.All, bool includeReblogInfo = false, bool includeNotesInfo = false) Parameters sinceId long Return posts that have appeared after the specified ID. Use this parameter to page through the results: first get a set of posts, and then get posts since the last ID of the previous set. startIndex long The post number to start at. count int The number of posts to return. type PostType The PostType to return. includeReblogInfo bool Whether or not the response should include reblog info. includeNotesInfo bool Whether or not the response should include notes info. Returns Task<BasePost[]> A Task<BasePost[]> that can be used to track the operation. If the task succeeds, the Task<BasePost[]>.Result\"/> will carry an array of posts. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Exceptions ObjectDisposedException The object has been disposed. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. ArgumentOutOfRangeException sinceId is less than 0. startIndex is less than 0. count is less than 1 or greater than 20. GetDashboardPostsAsync(long, DashboardOption, long, int, PostType, bool, bool) Asynchronously retrieves posts from the current user's dashboard. public Task<BasePost[]> GetDashboardPostsAsync(long Id, DashboardOption drashboardType, long startIndex = 0, int count = 20, PostType type = PostType.All, bool includeReblogInfo = false, bool includeNotesInfo = false) Parameters Id long Returns posts that appeared either after or before the given Id. after or before The drashboardType parameter takes a number. drashboardType DashboardOption After returns newer posts, Before returns older posts startIndex long The post number to start at. count int The number of posts to return. type PostType The PostType to return. includeReblogInfo bool Whether or not the response should include reblog info. includeNotesInfo bool Whether or not the response should include notes info. Returns Task<BasePost[]> A Task<BasePost[]> that can be used to track the operation. If the task succeeds, the Task<BasePost[]>.Result\"/> will carry an array of posts. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Exceptions ObjectDisposedException The object has been disposed. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. ArgumentOutOfRangeException Id is less than 0. startIndex is less than 0. count is less than 1 or greater than 20."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.GetDraftPostsAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.GetDraftPostsAsync.html",
    "title": "Method GetDraftPostsAsync | NewTumblrSharp",
    "summary": "Method GetDraftPostsAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll GetDraftPostsAsync(string, long, PostFilter) Asynchronously returns draft posts. public Task<BasePost[]> GetDraftPostsAsync(string blogName, long sinceId = 0, PostFilter filter = PostFilter.Html) Parameters blogName string The name of the blog for which to retrieve drafted posts. sinceId long Return posts that have appeared after the specified ID. Use this parameter to page through the results: first get a set of posts, and then get posts since the last ID of the previous set. filter PostFilter A PostFilter to apply. Returns Task<BasePost[]> A Task<BasePost[]> that can be used to track the operation. If the task succeeds, the Task<BasePost[]>.Result will carry an array of posts. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#blog-drafts Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. ArgumentException blogName is empty. ArgumentOutOfRangeException sinceId is less than 0. InvalidOperationException This TumblrClient instance does not have an OAuth token specified."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.GetFollowersAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.GetFollowersAsync.html",
    "title": "Method GetFollowersAsync | NewTumblrSharp",
    "summary": "Method GetFollowersAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll GetFollowersAsync(string, int, int) Asynchronously retrieves a blog's followers. public Task<Followers> GetFollowersAsync(string blogName, int startIndex = 0, int count = 20) Parameters blogName string The name of the blog. startIndex int The offset at which to start retrieving the followers. Use 0 to start retrieving from the latest follower. count int The number of followers to retrieve. Must be between 1 and 20. Returns Task<Followers> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a Followers instance. Otherwise Exception will carry a TumblrException A Followers instance. Remarks See: http://www.tumblr.com/docs/en/api/v2#blog-followers Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. ArgumentException blogName is empty. ArgumentOutOfRangeException startIndex is less than 0. count is less than 1 or greater than 20."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.GetFollowingAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.GetFollowingAsync.html",
    "title": "Method GetFollowingAsync | NewTumblrSharp",
    "summary": "Method GetFollowingAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll GetFollowingAsync(long, int) Asynchronously retrieves the blog that the current user is following. public Task<Following> GetFollowingAsync(long startIndex = 0, int count = 20) Parameters startIndex long The offset at which to start retrieving the followed blogs. Use 0 to start retrieving from the latest followed blog. count int The number of following blogs to retrieve. Must be between 1 and 20. Returns Task<Following> A Task that can be used to track the operation. If the task succeeds, the Result will carry a Following instance. Otherwise Exception will carry the TumblrException generated during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#m-ug-following Exceptions ObjectDisposedException The object has been disposed. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. ArgumentOutOfRangeException startIndex is less than 0. count is less than 1 or greater than 20."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.GetLikesAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.GetLikesAsync.html",
    "title": "Method GetLikesAsync | NewTumblrSharp",
    "summary": "Method GetLikesAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll GetLikesAsync(long, int, DateTime?, DateTime?) Asynchronously retrieves the current user's likes. public Task<Likes> GetLikesAsync(long startIndex = 0, int count = 20, DateTime? before = null, DateTime? after = null) Parameters startIndex long The offset at which to start retrieving the likes. Use 0 to start retrieving from the latest like. count int The number of likes to retrieve. Must be between 1 and 20. before DateTime? The timestamp before when to retrieve likes. after DateTime? The timestamp after when to retrieve likes. Returns Task<Likes> A Task that can be used to track the operation. If the task succeeds, the Result will carry a Likes instance. Otherwise Exception will carry the TumblrException generated during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#m-ug-likes Exceptions ObjectDisposedException The object has been disposed. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. ArgumentOutOfRangeException startIndex is less than 0. count is less than 1 or greater than 20."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.GetPostAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.GetPostAsync.html",
    "title": "Method GetPostAsync | NewTumblrSharp",
    "summary": "Method GetPostAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll GetPostAsync(string, long, bool, bool) Asynchronously retrieves a specific post by id. public Task<BasePost> GetPostAsync(string blogName, long id, bool includeReblogInfo = false, bool includeNotesInfo = false) Parameters blogName string Blog name to reference id long The id of the post to retrieve. includeReblogInfo bool Whether or not to include reblog info with the posts. includeNotesInfo bool Whether or not to include notes info with the posts. Returns Task<BasePost> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a BasePost instance representing the desired post. Otherwise Exception will carry a TumblrException if the post with the specified id cannot be found. Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. ArgumentException blogName is empty. ArgumentOutOfRangeException id is less than 0."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.GetPostsAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.GetPostsAsync.html",
    "title": "Method GetPostsAsync | NewTumblrSharp",
    "summary": "Method GetPostsAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll GetPostsAsync(string, long, int, PostType, bool, bool, PostFilter, string) Asynchronously retrieves published posts from a blog. public Task<Posts> GetPostsAsync(string blogName, long startIndex = 0, int count = 20, PostType type = PostType.All, bool includeReblogInfo = false, bool includeNotesInfo = false, PostFilter filter = PostFilter.Html, string tag = null) Parameters blogName string The name of the blog. startIndex long The offset at which to start retrieving the posts. Use 0 to start retrieving from the latest post. count int The number of posts to retrieve. Must be between 1 and 20. type PostType The PostType to retrieve. includeReblogInfo bool Whether or not to include reblog info with the posts. includeNotesInfo bool Whether or not to include notes info with the posts. filter PostFilter A PostFilter to apply. tag string A tag to filter by. Returns Task<Posts> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a Posts instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#posts Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. ArgumentException blogName is empty. ArgumentOutOfRangeException startIndex is less than 0. count is less than 1 or greater than 20."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.GetQueuedPostsAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.GetQueuedPostsAsync.html",
    "title": "Method GetQueuedPostsAsync | NewTumblrSharp",
    "summary": "Method GetQueuedPostsAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll GetQueuedPostsAsync(string, long, int, PostFilter) Asynchronously returns posts in the current user's queue. public Task<BasePost[]> GetQueuedPostsAsync(string blogName, long startIndex = 0, int count = 20, PostFilter filter = PostFilter.Html) Parameters blogName string The name of the blog for which to retrieve queued posts. startIndex long The offset at which to start retrieving the posts. Use 0 to start retrieving from the latest post. count int The number of posts to retrieve. Must be between 1 and 20. filter PostFilter A PostFilter to apply. Returns Task<BasePost[]> A Task<BasePost[]> that can be used to track the operation. If the task succeeds, the Task<BasePost[]>.Result will carry an array of posts. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#blog-queue Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. ArgumentException blogName is empty. ArgumentOutOfRangeException startIndex is less than 0. count is less than 1 or greater than 20. InvalidOperationException This TumblrClient instance does not have an OAuth token specified."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.GetSubmissionPostsAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.GetSubmissionPostsAsync.html",
    "title": "Method GetSubmissionPostsAsync | NewTumblrSharp",
    "summary": "Method GetSubmissionPostsAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll GetSubmissionPostsAsync(string, long, PostFilter) Asynchronously retrieves submission posts. public Task<BasePost[]> GetSubmissionPostsAsync(string blogName, long startIndex = 0, PostFilter filter = PostFilter.Html) Parameters blogName string The name of the blog for which to retrieve submission posts. startIndex long The post number to start at. Pass 0 to start from the first post. filter PostFilter A PostFilter to apply. Returns Task<BasePost[]> A Task<BasePost[]> that can be used to track the operation. If the task succeeds, the Task<BasePost[]>.Result; will carry an array of posts. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#blog-submissions Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. ArgumentException blogName is empty. ArgumentOutOfRangeException startIndex is less than 0. InvalidOperationException This TumblrClient instance does not have an OAuth token specified."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.GetTaggedPostsAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.GetTaggedPostsAsync.html",
    "title": "Method GetTaggedPostsAsync | NewTumblrSharp",
    "summary": "Method GetTaggedPostsAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll GetTaggedPostsAsync(string, DateTime?, int, PostFilter) Asynchronously retrieves posts that have been tagged with a specific tag. public Task<BasePost[]> GetTaggedPostsAsync(string tag, DateTime? before = null, int count = 20, PostFilter filter = PostFilter.Html) Parameters tag string The tag on the posts to retrieve. before DateTime? The timestamp of when to retrieve posts before. count int The number of posts to retrieve. filter PostFilter A PostFilter. Returns Task<BasePost[]> A Task<BasePost[]> that can be used to track the operation. If the task succeeds, the Task<BasePost[]>.Result will carry an array of posts. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#m-up-tagged Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException tag is null. ArgumentException tag is empty. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. ArgumentOutOfRangeException count is less than 1 or greater than 20."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.GetUserInfoAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.GetUserInfoAsync.html",
    "title": "Method GetUserInfoAsync | NewTumblrSharp",
    "summary": "Method GetUserInfoAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll GetUserInfoAsync() Asynchronously retrieves the user's account information that matches the OAuth credentials submitted with the request. public Task<UserInfo> GetUserInfoAsync() Returns Task<UserInfo> A Task that can be used to track the operation. If the task succeeds, the Result will carry a UserInfo instance. Otherwise Exception will carry the TumblrException generated during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#user-methods Exceptions ObjectDisposedException The object has been disposed. InvalidOperationException This TumblrClient instance does not have an OAuth token specified."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.GetUserLikesAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.GetUserLikesAsync.html",
    "title": "Method GetUserLikesAsync | NewTumblrSharp",
    "summary": "Method GetUserLikesAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll GetUserLikesAsync(int, int) Asynchronously retrieves the current user's likes. public Task<Likes> GetUserLikesAsync(int startIndex = 0, int count = 20) Parameters startIndex int The offset at which to start retrieving the likes. Use 0 to start retrieving from the latest like. count int The number of likes to retrieve. Must be between 1 and 20. Returns Task<Likes> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a Likes instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#m-ug-likes Exceptions ObjectDisposedException The object has been disposed. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. ArgumentOutOfRangeException startIndex is less than 0. count is less than 1 or greater than 20."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.LikeAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.LikeAsync.html",
    "title": "Method LikeAsync | NewTumblrSharp",
    "summary": "Method LikeAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll LikeAsync(long, string) Asynchronously likes a post. public Task LikeAsync(long postId, string reblogKey) Parameters postId long The identifier of the post to like. reblogKey string The reblog key for the post. Returns Task A Task that can be used to track the operation. If the task fails, Exception will carry a TumblrException Remarks See: http://www.tumblr.com/docs/en/api/v2#m-up-like Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException reblogKey is null. ArgumentException reblogKey is empty. ArgumentOutOfRangeException postId is less than 0. InvalidOperationException This TumblrClient instance does not have an OAuth token specified."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.ReblogAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.ReblogAsync.html",
    "title": "Method ReblogAsync | NewTumblrSharp",
    "summary": "Method ReblogAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll ReblogAsync(string, long, string, string) Asynchronously reblogs a post. public Task<PostCreationInfo> ReblogAsync(string blogName, long postId, string reblogKey, string comment = null) Parameters blogName string The name of the blog where to reblog the psot (must be one of the current user's blogs). postId long The identifier of the post to reblog. reblogKey string The post reblog key. comment string An optional comment to add to the reblog. Returns Task<PostCreationInfo> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a PostCreationInfo instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#reblogging Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. reblogKey is null. ArgumentException /// blogName is empty. reblogKey is empty. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. ReblogAsync(string, long, string, PostCreationState, DateTime?, string) Asynchronously reblogs a post. public Task<PostCreationInfo> ReblogAsync(string blogName, long postId, string reblogKey, PostCreationState state, DateTime? publish_On = null, string comment = null) Parameters blogName string The name of the blog where to reblog the psot (must be one of the current user's blogs). postId long The identifier of the post to reblog. reblogKey string The post reblog key. state PostCreationState Post creation state publish_On DateTime? if state is Queue is this the publishingtime comment string An optional comment to add to the reblog. Returns Task<PostCreationInfo> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a PostCreationInfo instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#reblogging Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. reblogKey is null. ArgumentException /// blogName is empty. reblogKey is empty. publish_On is in the past. InvalidOperationException This TumblrClient instance does not have an OAuth token specified."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.UnfollowAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.UnfollowAsync.html",
    "title": "Method UnfollowAsync | NewTumblrSharp",
    "summary": "Method UnfollowAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll UnfollowAsync(string) Asynchronously unfollows a blog. public Task UnfollowAsync(string blogUrl) Parameters blogUrl string The url of the blog to unfollow. Returns Task A Task that can be used to track the operation. If the task fails, Exception will carry a TumblrException Remarks See: http://www.tumblr.com/docs/en/api/v2#m-up-unfollow Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogUrl is null. ArgumentException blogUrl is empty. InvalidOperationException This TumblrClient instance does not have an OAuth token specified."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.UnlikeAsync.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.UnlikeAsync.html",
    "title": "Method UnlikeAsync | NewTumblrSharp",
    "summary": "Method UnlikeAsync Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll UnlikeAsync(long, string) Asynchronously unlikes a post. public Task UnlikeAsync(long postId, string reblogKey) Parameters postId long The identifier of the post to like. reblogKey string The reblog key for the post. Returns Task A Task that can be used to track the operation. If the task fails, Exception will carry a TumblrException Remarks See: http://www.tumblr.com/docs/en/api/v2#m-up-unlike Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException reblogKey is null. ArgumentException reblogKey is empty. ArgumentOutOfRangeException postId is less than 0. InvalidOperationException This TumblrClient instance does not have an OAuth token specified."
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.html",
    "title": "Class TumblrClient | NewTumblrSharp",
    "summary": "Class TumblrClient Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Encapsulates the Tumblr API. public class TumblrClient : TumblrClientBase, IDisposable Inheritance object TumblrClientBase TumblrClient Implements IDisposable Inherited Members TumblrClientBase.OAuthToken TumblrClientBase.CallApiMethodAsync<TResponse, TResult>(ApiMethod, Func<TResponse, TResult>, CancellationToken, IEnumerable<JsonConverter>) TumblrClientBase.CallApiMethodNoResultAsync(ApiMethod, CancellationToken) TumblrClientBase.CallApiMethodAsync<TResult>(ApiMethod, CancellationToken, IEnumerable<JsonConverter>) TumblrClientBase.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TumblrClient(IHmacSha1HashProvider, string, string, Token) Initializes a new instance of the TumblrClient class. TumblrClient(IHttpClientFactory, IHmacSha1HashProvider, string, string, Token) Initializes a new instance of the TumblrClient class. Methods CreatePostAsync(string, PostData) Asynchronously creates a new post. CreatePostAsync(string, PostData, CancellationToken) Asynchronously creates a new post. DeletePostAsync(string, long) Asynchronously deletes a post. Dispose(bool) Disposes of the object. EditPostAsync(string, long, PostData) Asynchronously edits an existing post. EditPostAsync(string, long, PostData, CancellationToken) Asynchronously edits an existing post. FollowAsync(string) Asynchronously follows a blog. GetBlogInfoAsync(string) Asynchronously retrieves general information about the blog, such as the title, number of posts, and other high-level data. GetBlogLikesAsync(string, int, int, DateTime?, DateTime?) Asynchronously retrieves the publicly exposed likes from a blog. GetDashboardPostsAsync(long, DashboardOption, long, int, PostType, bool, bool) Asynchronously retrieves posts from the current user's dashboard. GetDashboardPostsAsync(long, long, int, PostType, bool, bool) Asynchronously retrieves posts from the current user's dashboard. GetDraftPostsAsync(string, long, PostFilter) Asynchronously returns draft posts. GetFollowersAsync(string, int, int) Asynchronously retrieves a blog's followers. GetFollowingAsync(long, int) Asynchronously retrieves the blog that the current user is following. GetLikesAsync(long, int, DateTime?, DateTime?) Asynchronously retrieves the current user's likes. GetPostAsync(string, long, bool, bool) Asynchronously retrieves a specific post by id. GetPostsAsync(string, long, int, PostType, bool, bool, PostFilter, string) Asynchronously retrieves published posts from a blog. GetQueuedPostsAsync(string, long, int, PostFilter) Asynchronously returns posts in the current user's queue. GetSubmissionPostsAsync(string, long, PostFilter) Asynchronously retrieves submission posts. GetTaggedPostsAsync(string, DateTime?, int, PostFilter) Asynchronously retrieves posts that have been tagged with a specific tag. GetUserInfoAsync() Asynchronously retrieves the user's account information that matches the OAuth credentials submitted with the request. GetUserLikesAsync(int, int) Asynchronously retrieves the current user's likes. LikeAsync(long, string) Asynchronously likes a post. ReblogAsync(string, long, string, PostCreationState, DateTime?, string) Asynchronously reblogs a post. ReblogAsync(string, long, string, string) Asynchronously reblogs a post. UnfollowAsync(string) Asynchronously unfollows a blog. UnlikeAsync(long, string) Asynchronously unlikes a post."
  },
  "api/DontPanic.TumblrSharp.Client.UserBlogInfo.BlogType.html": {
    "href": "api/DontPanic.TumblrSharp.Client.UserBlogInfo.BlogType.html",
    "title": "Property BlogType | NewTumblrSharp",
    "summary": "Property BlogType Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll BlogType The type of blog (public or private). [JsonConverter(typeof(EnumStringConverter))] [JsonProperty(PropertyName = \"type\")] public BlogType BlogType { get; set; } Property Value BlogType"
  },
  "api/DontPanic.TumblrSharp.Client.UserBlogInfo.DraftsCount.html": {
    "href": "api/DontPanic.TumblrSharp.Client.UserBlogInfo.DraftsCount.html",
    "title": "Property DraftsCount | NewTumblrSharp",
    "summary": "Property DraftsCount Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll DraftsCount The number of posts in Draft state. [JsonProperty(PropertyName = \"drafts\")] public int DraftsCount { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.UserBlogInfo.FollowersCount.html": {
    "href": "api/DontPanic.TumblrSharp.Client.UserBlogInfo.FollowersCount.html",
    "title": "Property FollowersCount | NewTumblrSharp",
    "summary": "Property FollowersCount Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll FollowersCount Total count of followers for this blog. [JsonProperty(PropertyName = \"followers\")] public long FollowersCount { get; set; } Property Value long"
  },
  "api/DontPanic.TumblrSharp.Client.UserBlogInfo.IsFacebookPostEnabled.html": {
    "href": "api/DontPanic.TumblrSharp.Client.UserBlogInfo.IsFacebookPostEnabled.html",
    "title": "Property IsFacebookPostEnabled | NewTumblrSharp",
    "summary": "Property IsFacebookPostEnabled Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll IsFacebookPostEnabled Whether the automatic posting to Facebook of posts is enabled or not. [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"facebook\")] public bool IsFacebookPostEnabled { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.UserBlogInfo.IsPrimary.html": {
    "href": "api/DontPanic.TumblrSharp.Client.UserBlogInfo.IsPrimary.html",
    "title": "Property IsPrimary | NewTumblrSharp",
    "summary": "Property IsPrimary Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll IsPrimary Indicates if this is the user's primary blog. [JsonProperty(PropertyName = \"primary\")] public bool IsPrimary { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.UserBlogInfo.IsSharingLikes.html": {
    "href": "api/DontPanic.TumblrSharp.Client.UserBlogInfo.IsSharingLikes.html",
    "title": "Property IsSharingLikes | NewTumblrSharp",
    "summary": "Property IsSharingLikes Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll IsSharingLikes Whether if the user likes are public or not. [JsonProperty(PropertyName = \"share_likes\")] public bool IsSharingLikes { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.UserBlogInfo.IsTweetEnabled.html": {
    "href": "api/DontPanic.TumblrSharp.Client.UserBlogInfo.IsTweetEnabled.html",
    "title": "Property IsTweetEnabled | NewTumblrSharp",
    "summary": "Property IsTweetEnabled Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll IsTweetEnabled Whether the automatic tweet of posts is enabled or not. [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"tweet\")] public bool IsTweetEnabled { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.UserBlogInfo.MessagesCount.html": {
    "href": "api/DontPanic.TumblrSharp.Client.UserBlogInfo.MessagesCount.html",
    "title": "Property MessagesCount | NewTumblrSharp",
    "summary": "Property MessagesCount Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll MessagesCount [JsonProperty(PropertyName = \"messages\")] public int MessagesCount { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.UserBlogInfo.QueueCount.html": {
    "href": "api/DontPanic.TumblrSharp.Client.UserBlogInfo.QueueCount.html",
    "title": "Property QueueCount | NewTumblrSharp",
    "summary": "Property QueueCount Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll QueueCount The number of posts in Queue state. [JsonProperty(PropertyName = \"queue\")] public int QueueCount { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.UserBlogInfo.html": {
    "href": "api/DontPanic.TumblrSharp.Client.UserBlogInfo.html",
    "title": "Class UserBlogInfo | NewTumblrSharp",
    "summary": "Class UserBlogInfo Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Contains information about a user's blog. public class UserBlogInfo : BlogBase Inheritance object BlogBase UserBlogInfo Inherited Members BlogBase.Title BlogBase.Name BlogBase.Url BlogBase.LastUpdated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BlogType The type of blog (public or private). DraftsCount The number of posts in Draft state. FollowersCount Total count of followers for this blog. IsFacebookPostEnabled Whether the automatic posting to Facebook of posts is enabled or not. IsPrimary Indicates if this is the user's primary blog. IsSharingLikes Whether if the user likes are public or not. IsTweetEnabled Whether the automatic tweet of posts is enabled or not. MessagesCount QueueCount The number of posts in Queue state."
  },
  "api/DontPanic.TumblrSharp.Client.UserInfo.Blogs.html": {
    "href": "api/DontPanic.TumblrSharp.Client.UserInfo.Blogs.html",
    "title": "Property Blogs | NewTumblrSharp",
    "summary": "Property Blogs Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Blogs An array of UserBlogInfo instances, containing information about the user's blogs. [JsonProperty(PropertyName = \"blogs\")] public UserBlogInfo[] Blogs { get; set; } Property Value UserBlogInfo[]"
  },
  "api/DontPanic.TumblrSharp.Client.UserInfo.DefaultPostFormat.html": {
    "href": "api/DontPanic.TumblrSharp.Client.UserInfo.DefaultPostFormat.html",
    "title": "Property DefaultPostFormat | NewTumblrSharp",
    "summary": "Property DefaultPostFormat Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll DefaultPostFormat The user's default PostFormat. [JsonConverter(typeof(EnumStringConverter))] [JsonProperty(PropertyName = \"default_post_format\")] public PostFormat DefaultPostFormat { get; set; } Property Value PostFormat"
  },
  "api/DontPanic.TumblrSharp.Client.UserInfo.FollowingCount.html": {
    "href": "api/DontPanic.TumblrSharp.Client.UserInfo.FollowingCount.html",
    "title": "Property FollowingCount | NewTumblrSharp",
    "summary": "Property FollowingCount Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll FollowingCount The number of blogs the user is following [JsonProperty(PropertyName = \"following\")] public long FollowingCount { get; set; } Property Value long"
  },
  "api/DontPanic.TumblrSharp.Client.UserInfo.LikesCount.html": {
    "href": "api/DontPanic.TumblrSharp.Client.UserInfo.LikesCount.html",
    "title": "Property LikesCount | NewTumblrSharp",
    "summary": "Property LikesCount Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll LikesCount The total count of the user's likes [JsonProperty(PropertyName = \"likes\")] public long LikesCount { get; set; } Property Value long"
  },
  "api/DontPanic.TumblrSharp.Client.UserInfo.Name.html": {
    "href": "api/DontPanic.TumblrSharp.Client.UserInfo.Name.html",
    "title": "Property Name | NewTumblrSharp",
    "summary": "Property Name Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Name The user's tumblr short name. [JsonProperty(PropertyName = \"name\")] public string Name { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.UserInfo.html": {
    "href": "api/DontPanic.TumblrSharp.Client.UserInfo.html",
    "title": "Class UserInfo | NewTumblrSharp",
    "summary": "Class UserInfo Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Contains information about a user's account. public class UserInfo Inheritance object UserInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Blogs An array of UserBlogInfo instances, containing information about the user's blogs. DefaultPostFormat The user's default PostFormat. FollowingCount The number of blogs the user is following LikesCount The total count of the user's likes Name The user's tumblr short name."
  },
  "api/DontPanic.TumblrSharp.Client.VideoPost.Caption.html": {
    "href": "api/DontPanic.TumblrSharp.Client.VideoPost.Caption.html",
    "title": "Property Caption | NewTumblrSharp",
    "summary": "Property Caption Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Caption The user-supplied caption. [JsonProperty(\"caption\")] public string Caption { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.VideoPost.Duration.html": {
    "href": "api/DontPanic.TumblrSharp.Client.VideoPost.Duration.html",
    "title": "Property Duration | NewTumblrSharp",
    "summary": "Property Duration Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Duration The video duration in seconds, or 0 if the duration is not specified. [JsonProperty(\"duration\")] public double Duration { get; set; } Property Value double"
  },
  "api/DontPanic.TumblrSharp.Client.VideoPost.IsHtml5Capable.html": {
    "href": "api/DontPanic.TumblrSharp.Client.VideoPost.IsHtml5Capable.html",
    "title": "Property IsHtml5Capable | NewTumblrSharp",
    "summary": "Property IsHtml5Capable Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll IsHtml5Capable Signals whether the video is HTML5 capable or not. [JsonProperty(\"html5_capable\")] public bool IsHtml5Capable { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.VideoPost.Player.html": {
    "href": "api/DontPanic.TumblrSharp.Client.VideoPost.Player.html",
    "title": "Property Player | NewTumblrSharp",
    "summary": "Property Player Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Player An array of Player instances. [JsonProperty(\"player\")] public Player[] Player { get; set; } Property Value Player[]"
  },
  "api/DontPanic.TumblrSharp.Client.VideoPost.ThumbnailHeight.html": {
    "href": "api/DontPanic.TumblrSharp.Client.VideoPost.ThumbnailHeight.html",
    "title": "Property ThumbnailHeight | NewTumblrSharp",
    "summary": "Property ThumbnailHeight Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll ThumbnailHeight The thumbnail image height. [JsonProperty(\"thumbnail_height\")] public int ThumbnailHeight { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.VideoPost.ThumbnailUrl.html": {
    "href": "api/DontPanic.TumblrSharp.Client.VideoPost.ThumbnailUrl.html",
    "title": "Property ThumbnailUrl | NewTumblrSharp",
    "summary": "Property ThumbnailUrl Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll ThumbnailUrl Url to the thumbnail image for the video. [JsonProperty(\"thumbnail_url\")] public string ThumbnailUrl { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.VideoPost.ThumbnailWidth.html": {
    "href": "api/DontPanic.TumblrSharp.Client.VideoPost.ThumbnailWidth.html",
    "title": "Property ThumbnailWidth | NewTumblrSharp",
    "summary": "Property ThumbnailWidth Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll ThumbnailWidth The thumbnail image width. [JsonProperty(\"thumbnail_width\")] public int ThumbnailWidth { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.VideoPost.VideoUrl.html": {
    "href": "api/DontPanic.TumblrSharp.Client.VideoPost.VideoUrl.html",
    "title": "Property VideoUrl | NewTumblrSharp",
    "summary": "Property VideoUrl Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll VideoUrl Url to the video file (may be null if the video can only be embedded, i.e.: YouTube). [JsonProperty(\"video_url\")] public string VideoUrl { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.VideoPost.html": {
    "href": "api/DontPanic.TumblrSharp.Client.VideoPost.html",
    "title": "Class VideoPost | NewTumblrSharp",
    "summary": "Class VideoPost Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents a video post. public class VideoPost : BasePost Inheritance object BasePost VideoPost Inherited Members BasePost.Type BasePost.BlogName BasePost.Id BasePost.Url BasePost.Slug BasePost.Timestamp BasePost.State BasePost.Format BasePost.ReblogKey BasePost.Tags BasePost.ShortUrl BasePost.Summary BasePost.NotesCount BasePost.Notes BasePost.SourceUrl BasePost.SourceTitle BasePost.NumberOfPostsInResponse BasePost.Liked BasePost.IsMobile BasePost.IsBookmarklet BasePost.Reblog BasePost.RebloggedFromId BasePost.RebloggedFromUrl BasePost.RebloggedFromName BasePost.RebloggedFromTitle BasePost.RebloggedRootId BasePost.RebloggedRootUrl BasePost.RebloggedRootName BasePost.RebloggedRootTitle BasePost.Trails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Caption The user-supplied caption. Duration The video duration in seconds, or 0 if the duration is not specified. IsHtml5Capable Signals whether the video is HTML5 capable or not. Player An array of Player instances. ThumbnailHeight The thumbnail image height. ThumbnailUrl Url to the thumbnail image for the video. ThumbnailWidth The thumbnail image width. VideoUrl Url to the video file (may be null if the video can only be embedded, i.e.: YouTube)."
  },
  "api/DontPanic.TumblrSharp.Client.html": {
    "href": "api/DontPanic.TumblrSharp.Client.html",
    "title": "Namespace DontPanic.TumblrSharp.Client | NewTumblrSharp",
    "summary": "Namespace DontPanic.TumblrSharp.Client Classes AnswerPost Represents an answer post. AudioPost Represents an audio post. BaseNote Base class for post notes. BasePost Base class for post types. BlogBase Contains common properties for a blog. BlogInfo Contains information about a blog. BoolConverter Converts \"Y\" and \"N\" to boolean. ChatFragment Represents a fragment of a ChatPost. ChatPost Represents a chat post. EnumStringConverter Generic converter for enumerations. Exif Exif ExtensionService extensionclass for IServiceCollection Followers Contains information about a blog's followers. Following Contains the blogs that a user is following. Likes Contains the user's likes. LinkPost Represents a link post. NoteConverter convert note Photo Represents a photo in a PhotoPost. PhotoInfo Represents information about a Photo. PhotoPost Represents a photo post. Player Represents an embeddable player for a video in a VideoPost. PostArrayConverter Converts post objects to the proper post type. PostAttributionNote PostAttributionNote PostCreationInfo Represents information about a newly created post. Posts Contains information about a blog's posts. QuotePost Represents a quote post. Reblog reblog TextPost Represents a text post. TimestampConverter Converts a timestamp to a DateTime. Trail Trail TrailBlog The blog from Trail TrailConverter convert trail TrailPost post object from Trail TrailTheme theme of a blog see Theme TrailThemeConverter Converter for trail theme TumblrClient Encapsulates the Tumblr API. UserBlogInfo Contains information about a user's blog. UserInfo Contains information about a user's account. VideoPost Represents a video post. Enums DashboardOption Option for get dashboardpost, before or after a spezifics Id"
  },
  "api/DontPanic.TumblrSharp.DateTimeHelper.FromTimestamp.html": {
    "href": "api/DontPanic.TumblrSharp.DateTimeHelper.FromTimestamp.html",
    "title": "Method FromTimestamp | NewTumblrSharp",
    "summary": "Method FromTimestamp Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll FromTimestamp(long) Converts from a timestamp to a DateTime. The result is in local time. public static DateTime FromTimestamp(long timestamp) Parameters timestamp long The timestamp. Returns DateTime The equivalent DateTime in local time. FromTimestamp(double) Converts from a timestamp to a DateTime. The result is in local time. public static DateTime FromTimestamp(double timestamp) Parameters timestamp double The timestamp. Returns DateTime The equivalent DateTime in local time."
  },
  "api/DontPanic.TumblrSharp.DateTimeHelper.ToTimestamp.html": {
    "href": "api/DontPanic.TumblrSharp.DateTimeHelper.ToTimestamp.html",
    "title": "Method ToTimestamp | NewTumblrSharp",
    "summary": "Method ToTimestamp Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll ToTimestamp(DateTime) Converts from a DateTime to a timestamp. public static long ToTimestamp(DateTime date) Parameters date DateTime The DateTime. Returns long The timestamp."
  },
  "api/DontPanic.TumblrSharp.DateTimeHelper.html": {
    "href": "api/DontPanic.TumblrSharp.DateTimeHelper.html",
    "title": "Class DateTimeHelper | NewTumblrSharp",
    "summary": "Class DateTimeHelper Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Converts from Unix-type timestamp to DateTime and vice-versa. public static class DateTimeHelper Inheritance object DateTimeHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FromTimestamp(double) Converts from a timestamp to a DateTime. The result is in local time. FromTimestamp(long) Converts from a timestamp to a DateTime. The result is in local time. ToTimestamp(DateTime) Converts from a DateTime to a timestamp."
  },
  "api/DontPanic.TumblrSharp.ExtensionHttpRequestMessage.PreparationForTumblrClient.html": {
    "href": "api/DontPanic.TumblrSharp.ExtensionHttpRequestMessage.PreparationForTumblrClient.html",
    "title": "Method PreparationForTumblrClient | NewTumblrSharp",
    "summary": "Method PreparationForTumblrClient Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll PreparationForTumblrClient(HttpRequestMessage, IHmacSha1HashProvider, string, string, Token) set the authoriaztionheader for TumblrClient public static Task PreparationForTumblrClient(this HttpRequestMessage request, IHmacSha1HashProvider hashProvider, string consumerKey, string consumerSecret, Token oAuthToken) Parameters request HttpRequestMessage hashProvider IHmacSha1HashProvider consumerKey string consumerSecret string oAuthToken Token Returns Task"
  },
  "api/DontPanic.TumblrSharp.ExtensionHttpRequestMessage.html": {
    "href": "api/DontPanic.TumblrSharp.ExtensionHttpRequestMessage.html",
    "title": "Class ExtensionHttpRequestMessage | NewTumblrSharp",
    "summary": "Class ExtensionHttpRequestMessage Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Extensionsclass for HttpRequestMessage public static class ExtensionHttpRequestMessage Inheritance object ExtensionHttpRequestMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PreparationForTumblrClient(HttpRequestMessage, IHmacSha1HashProvider, string, string, Token) set the authoriaztionheader for TumblrClient"
  },
  "api/DontPanic.TumblrSharp.HmacSha1HashProvider.ComputeHash.html": {
    "href": "api/DontPanic.TumblrSharp.HmacSha1HashProvider.ComputeHash.html",
    "title": "Method ComputeHash | NewTumblrSharp",
    "summary": "Method ComputeHash Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll ComputeHash(string, string, string) Gets a HMAC-SHA1 hash for an OAuth request. public string ComputeHash(string consumerSecret, string oauthSecret, string signatureBaseString) Parameters consumerSecret string The consumer secret. oauthSecret string The OAuth secret. signatureBaseString string The signature base string for which to compute the hash. Returns string A HMAC-SHA1 hash of signatureBaseString."
  },
  "api/DontPanic.TumblrSharp.HmacSha1HashProvider.html": {
    "href": "api/DontPanic.TumblrSharp.HmacSha1HashProvider.html",
    "title": "Class HmacSha1HashProvider | NewTumblrSharp",
    "summary": "Class HmacSha1HashProvider Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Provides an implementation of IHmacSha1HashProvider for signing OAuth requests. public class HmacSha1HashProvider : IHmacSha1HashProvider Inheritance object HmacSha1HashProvider Implements IHmacSha1HashProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ComputeHash(string, string, string) Gets a HMAC-SHA1 hash for an OAuth request."
  },
  "api/DontPanic.TumblrSharp.IHmacSha1HashProvider.ComputeHash.html": {
    "href": "api/DontPanic.TumblrSharp.IHmacSha1HashProvider.ComputeHash.html",
    "title": "Method ComputeHash | NewTumblrSharp",
    "summary": "Method ComputeHash Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll ComputeHash(string, string, string) Gets a HMAC-SHA1 hash for an OAuth request. string ComputeHash(string consumerSecret, string oauthSecret, string signatureBaseString) Parameters consumerSecret string The consumer secret. oauthSecret string The OAuth secret. signatureBaseString string The signature base string for which to compute the hash. Returns string A HMAC-SHA1 hash of signatureBaseString."
  },
  "api/DontPanic.TumblrSharp.IHmacSha1HashProvider.html": {
    "href": "api/DontPanic.TumblrSharp.IHmacSha1HashProvider.html",
    "title": "Interface IHmacSha1HashProvider | NewTumblrSharp",
    "summary": "Interface IHmacSha1HashProvider Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Provides HMAC-SHA1 hash for signing OAuth requests. public interface IHmacSha1HashProvider Methods ComputeHash(string, string, string) Gets a HMAC-SHA1 hash for an OAuth request."
  },
  "api/DontPanic.TumblrSharp.IMethodParameter.AsHttpContent.html": {
    "href": "api/DontPanic.TumblrSharp.IMethodParameter.AsHttpContent.html",
    "title": "Method AsHttpContent | NewTumblrSharp",
    "summary": "Method AsHttpContent Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll AsHttpContent() Converts the parameter to a HttpContent. HttpContent AsHttpContent() Returns HttpContent The parameter as a HttpContent."
  },
  "api/DontPanic.TumblrSharp.IMethodParameter.Name.html": {
    "href": "api/DontPanic.TumblrSharp.IMethodParameter.Name.html",
    "title": "Property Name | NewTumblrSharp",
    "summary": "Property Name Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Name Gets the parameter name. string Name { get; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.IMethodParameter.html": {
    "href": "api/DontPanic.TumblrSharp.IMethodParameter.html",
    "title": "Interface IMethodParameter | NewTumblrSharp",
    "summary": "Interface IMethodParameter Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Represents a parameter for an ApiMethod. public interface IMethodParameter : IEquatable<IMethodParameter> Inherited Members IEquatable<IMethodParameter>.Equals(IMethodParameter) Properties Name Gets the parameter name. Methods AsHttpContent() Converts the parameter to a HttpContent."
  },
  "api/DontPanic.TumblrSharp.ITumblrClientFactory.Create.html": {
    "href": "api/DontPanic.TumblrSharp.ITumblrClientFactory.Create.html",
    "title": "Method Create | NewTumblrSharp",
    "summary": "Method Create Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Create<TClient>(string, string, Token) Creates a new Tumblr client instance of type TClient. TClient Create<TClient>(string consumerKey, string consumerSecret, Token oAuthToken = null) where TClient : TumblrClientBase Parameters consumerKey string The consumer key. consumerSecret string The consumer secret. oAuthToken Token An optional access token for the API. If no access token is provided, only the methods that do not require OAuth can be invoked successfully. Returns TClient A new Tumblr client instance of type TClient. Type Parameters TClient The type of client to create (must derive from TumblrClientBase)."
  },
  "api/DontPanic.TumblrSharp.ITumblrClientFactory.html": {
    "href": "api/DontPanic.TumblrSharp.ITumblrClientFactory.html",
    "title": "Interface ITumblrClientFactory | NewTumblrSharp",
    "summary": "Interface ITumblrClientFactory Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Generic factory for TumblrClientBase instances. public interface ITumblrClientFactory Methods Create<TClient>(string, string, Token) Creates a new Tumblr client instance of type TClient."
  },
  "api/DontPanic.TumblrSharp.MethodParameterSet.-ctor.html": {
    "href": "api/DontPanic.TumblrSharp.MethodParameterSet.-ctor.html",
    "title": "Constructor MethodParameterSet | NewTumblrSharp",
    "summary": "Constructor MethodParameterSet Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll MethodParameterSet() Initializes a new instance of the MethodParameterSet class. public MethodParameterSet() MethodParameterSet(IEnumerable<IMethodParameter>) Initializes a new instance of the MethodParameterSet class. public MethodParameterSet(IEnumerable<IMethodParameter> collection) Parameters collection IEnumerable<IMethodParameter> An enumerable list of IMethodParameter instances to insert in the set."
  },
  "api/DontPanic.TumblrSharp.MethodParameterSet.Add.html": {
    "href": "api/DontPanic.TumblrSharp.MethodParameterSet.Add.html",
    "title": "Method Add | NewTumblrSharp",
    "summary": "Method Add Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Add(string, long, long?) Adds a new parameter to the set. public void Add(string name, long value, long? defaultValue = null) Parameters name string The parameter name. value long The parameter value. defaultValue long? The parameter's default value. Remarks Tumblr API methods define default values for most of the method's parameters. A parameter whose value equals to the default value can be omitted from the request; by specifying the defaultValue the parameter won't be added to the set if its value equals to the default value. Exceptions ArgumentNullException name is null. ArgumentException name name is empty or a whitespace string. Add(string, double, double?) Adds a new parameter to the set. public void Add(string name, double value, double? defaultValue = null) Parameters name string The parameter name. value double The parameter value. defaultValue double? The parameter's default value. Remarks Tumblr API methods define default values for most of the method's parameters. A parameter whose value equals to the default value can be omitted from the request; by specifying the defaultValue the parameter won't be added to the set if its value equals to the default value. Exceptions ArgumentNullException name is null. ArgumentException name name is empty or a whitespace string. Add(string, int, int?) Adds a new parameter to the set. public void Add(string name, int value, int? defaultValue = null) Parameters name string The parameter name. value int The parameter value. defaultValue int? The parameter's default value. Remarks Tumblr API methods define default values for most of the method's parameters. A parameter whose value equals to the default value can be omitted from the request; by specifying the defaultValue the parameter won't be added to the set if its value equals to the default value. Exceptions ArgumentNullException name is null. ArgumentException name name is empty or a whitespace string. Add(string, bool, bool?) Adds a new parameter to the set. public void Add(string name, bool value, bool? defaultValue = null) Parameters name string The parameter name. value bool The parameter value. defaultValue bool? The parameter's default value. Remarks Tumblr API methods define default values for most of the method's parameters. A parameter whose value equals to the default value can be omitted from the request; by specifying the defaultValue the parameter won't be added to the set if its value equals to the default value. Exceptions ArgumentNullException name is null. ArgumentException name name is empty or a whitespace string. Add(string, string, string) Adds a new parameter to the set. public void Add(string name, string value, string defaultValue = null) Parameters name string The parameter name. value string The parameter value. defaultValue string The parameter's default value. Remarks Tumblr API methods define default values for most of the method's parameters. A parameter whose value equals to the default value can be omitted from the request; by specifying the defaultValue the parameter won't be added to the set if its value equals to the default value. Exceptions ArgumentNullException name is null. ArgumentException name name is empty or a whitespace string. Add(string, byte[]) Adds a new parameter to the set. public void Add(string name, byte[] value) Parameters name string The parameter name. value byte[] The parameter value. Exceptions ArgumentNullException name is null. ArgumentException name name is empty or a whitespace string."
  },
  "api/DontPanic.TumblrSharp.MethodParameterSet.html": {
    "href": "api/DontPanic.TumblrSharp.MethodParameterSet.html",
    "title": "Class MethodParameterSet | NewTumblrSharp",
    "summary": "Class MethodParameterSet Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll A sorted set of IMethodParameter instances. public class MethodParameterSet : SortedSet<IMethodParameter>, IReadOnlyCollection<IMethodParameter>, ISet<IMethodParameter>, ICollection<IMethodParameter>, IEnumerable<IMethodParameter>, ICollection, IEnumerable, IDeserializationCallback, ISerializable Inheritance object SortedSet<IMethodParameter> MethodParameterSet Implements IReadOnlyCollection<IMethodParameter> ISet<IMethodParameter> ICollection<IMethodParameter> IEnumerable<IMethodParameter> ICollection IEnumerable IDeserializationCallback ISerializable Inherited Members SortedSet<IMethodParameter>.Add(IMethodParameter) SortedSet<IMethodParameter>.Clear() SortedSet<IMethodParameter>.Contains(IMethodParameter) SortedSet<IMethodParameter>.CopyTo(IMethodParameter[]) SortedSet<IMethodParameter>.CopyTo(IMethodParameter[], int) SortedSet<IMethodParameter>.CopyTo(IMethodParameter[], int, int) SortedSet<IMethodParameter>.CreateSetComparer() SortedSet<IMethodParameter>.CreateSetComparer(IEqualityComparer<IMethodParameter>) SortedSet<IMethodParameter>.ExceptWith(IEnumerable<IMethodParameter>) SortedSet<IMethodParameter>.GetEnumerator() SortedSet<IMethodParameter>.GetObjectData(SerializationInfo, StreamingContext) SortedSet<IMethodParameter>.GetViewBetween(IMethodParameter, IMethodParameter) SortedSet<IMethodParameter>.IntersectWith(IEnumerable<IMethodParameter>) SortedSet<IMethodParameter>.IsProperSubsetOf(IEnumerable<IMethodParameter>) SortedSet<IMethodParameter>.IsProperSupersetOf(IEnumerable<IMethodParameter>) SortedSet<IMethodParameter>.IsSubsetOf(IEnumerable<IMethodParameter>) SortedSet<IMethodParameter>.IsSupersetOf(IEnumerable<IMethodParameter>) SortedSet<IMethodParameter>.OnDeserialization(object) SortedSet<IMethodParameter>.Overlaps(IEnumerable<IMethodParameter>) SortedSet<IMethodParameter>.Remove(IMethodParameter) SortedSet<IMethodParameter>.RemoveWhere(Predicate<IMethodParameter>) SortedSet<IMethodParameter>.Reverse() SortedSet<IMethodParameter>.SetEquals(IEnumerable<IMethodParameter>) SortedSet<IMethodParameter>.SymmetricExceptWith(IEnumerable<IMethodParameter>) SortedSet<IMethodParameter>.UnionWith(IEnumerable<IMethodParameter>) SortedSet<IMethodParameter>.Comparer SortedSet<IMethodParameter>.Count SortedSet<IMethodParameter>.Max SortedSet<IMethodParameter>.Min object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MethodParameterSet() Initializes a new instance of the MethodParameterSet class. MethodParameterSet(IEnumerable<IMethodParameter>) Initializes a new instance of the MethodParameterSet class. Methods Add(string, bool, bool?) Adds a new parameter to the set. Add(string, byte[]) Adds a new parameter to the set. Add(string, double, double?) Adds a new parameter to the set. Add(string, int, int?) Adds a new parameter to the set. Add(string, long, long?) Adds a new parameter to the set. Add(string, string, string) Adds a new parameter to the set."
  },
  "api/DontPanic.TumblrSharp.NoteType.html": {
    "href": "api/DontPanic.TumblrSharp.NoteType.html",
    "title": "Enum NoteType | NewTumblrSharp",
    "summary": "Enum NoteType Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Defines the type of note on a post public enum NoteType Fields Like = 2 like Post_attribution = 4 post attribution Posted = 0 posted Reblog = 1 reblog Reply = 3 reply"
  },
  "api/DontPanic.TumblrSharp.OAuth.IOAuthClientFactory.Create.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.IOAuthClientFactory.Create.html",
    "title": "Method Create | NewTumblrSharp",
    "summary": "Method Create Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll Create(string, string) Creates a new OAuthClient instance. OAuthClient Create(string consumerKey, string consumerSecret) Parameters consumerKey string The consumer key. consumerSecret string The consumer secret. Returns OAuthClient A OAuthClient instance."
  },
  "api/DontPanic.TumblrSharp.OAuth.IOAuthClientFactory.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.IOAuthClientFactory.html",
    "title": "Interface IOAuthClientFactory | NewTumblrSharp",
    "summary": "Interface IOAuthClientFactory Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll Factory for OAuthClient instances. public interface IOAuthClientFactory Methods Create(string, string) Creates a new OAuthClient instance."
  },
  "api/DontPanic.TumblrSharp.OAuth.OAuthClient.-ctor.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.OAuthClient.-ctor.html",
    "title": "Constructor OAuthClient | NewTumblrSharp",
    "summary": "Constructor OAuthClient Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll OAuthClient(IHmacSha1HashProvider, string, string) Initializes a new instance of the DontPanic.TumblrSharp.OAuth client class. public OAuthClient(IHmacSha1HashProvider hashProvider, string consumerKey, string consumerSecret) Parameters hashProvider IHmacSha1HashProvider A IHmacSha1HashProvider implementation used to generate a HMAC-SHA1 hash for OAuth purposes. consumerKey string The consumer key. consumerSecret string The consumer secret. Remarks You can get a consumer key and a consumer secret by registering an application with Tumblr: http://www.tumblr.com/oauth/apps Exceptions ArgumentNullException hashProvider is null. consumerKey is null. consumerSecret is null. ArgumentException consumerKey is empty. consumerSecret is empty."
  },
  "api/DontPanic.TumblrSharp.OAuth.OAuthClient.GetAccessTokenAsync.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.OAuthClient.GetAccessTokenAsync.html",
    "title": "Method GetAccessTokenAsync | NewTumblrSharp",
    "summary": "Method GetAccessTokenAsync Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll GetAccessTokenAsync(Token, string) Gets the authorized access token that can be used to make OAuth calls. public Task<Token> GetAccessTokenAsync(Token requestToken, string verifierUrl) Parameters requestToken Token The rest token sent from the server to the callback url.que verifierUrl string The verifier url returned from the server. Returns Task<Token> The access token. Exceptions ArgumentNullException requestToken is null. verifierUrl is null. ArgumentException verifierUrl is empty. OAuthException Could not determine oauth_token and oauth_token_secret from server response. An exception occurred during the method call. GetAccessTokenAsync(Token, string, string) Gets the authorized access token that can be used to make OAuth calls. public Task<Token> GetAccessTokenAsync(Token requestToken, string oAuthToken, string oAuthVerifier) Parameters requestToken Token The rest token sent from the server to the callback url que oAuthToken string oauth_token oAuthVerifier string oauth_verifier Returns Task<Token> The access token. Exceptions ArgumentNullException requestToken is null. oAuthToken is null. oAuthVerifier is null. ArgumentException oAuthToken is empty. oAuthVerifier is empty.. OAuthException An exception occurred during the method call."
  },
  "api/DontPanic.TumblrSharp.OAuth.OAuthClient.GetAuthorizeUrl.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.OAuthClient.GetAuthorizeUrl.html",
    "title": "Method GetAuthorizeUrl | NewTumblrSharp",
    "summary": "Method GetAuthorizeUrl Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll GetAuthorizeUrl(Token) Builds the url that is required to connect to the server, where the server will authenticate the user and ask for authorization. public Uri GetAuthorizeUrl(Token requestToken) Parameters requestToken Token The request token obtained during the call to GetRequestTokenAsync(string). Returns Uri The Uri where to direct the user to obtain authorization. Remarks After the User authenticates with the Service Provider and grants permission for Consumer access, the Consumer will be notified that the Request Token has been authorized and ready to be exchanged for an Access Token. The Service Provider will construct an HTTP GET request URL, and redirects the User’s web browser to that URL with the following parameters: oauth_token which is the request token and oauth_verifier which is the verification code tied to the request token. Exceptions ArgumentNullException requestToken is null. requestToken.Key is null. ArgumentException requestToken.Key is empty."
  },
  "api/DontPanic.TumblrSharp.OAuth.OAuthClient.GetRequestTokenAsync.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.OAuthClient.GetRequestTokenAsync.html",
    "title": "Method GetRequestTokenAsync | NewTumblrSharp",
    "summary": "Method GetRequestTokenAsync Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll GetRequestTokenAsync(string) Asynchronously gets a request token. public Task<Token> GetRequestTokenAsync(string callbackUrl) Parameters callbackUrl string The server redirects Users to this URL after they authorize access to their private data. Returns Task<Token> The request token. Remarks The Consumer obtains an unauthorized Request Token by asking the Service Provider to issue a Token. The Request Token’s sole purpose is to receive User approval and can only be used to obtain an Access Token. Exceptions ArgumentNullException callbackUrl is null. ArgumentException callbackUrl is empty. OAuthException Could not determine oauth_token and oauth_token_secret from server response. An exception occurred during the method call."
  },
  "api/DontPanic.TumblrSharp.OAuth.OAuthClient.PerformXAuthAsync.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.OAuthClient.PerformXAuthAsync.html",
    "title": "Method PerformXAuthAsync | NewTumblrSharp",
    "summary": "Method PerformXAuthAsync Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll PerformXAuthAsync(string, string) Asynchronously performs XAuth. public Task<Token> PerformXAuthAsync(string userName, string password) Parameters userName string The user name. password string The user password. Returns Task<Token> The access Token. Remarks XAuth is mainly used in mobile applications, where the device does not (or can not) have a callback url. It uses the user name and password to get the access token from the server. Exceptions ArgumentNullException userName is null. password is null. ArgumentException userName is empty. password is empty. OAuthException Could not determine oauth_token and oauth_token_secret from server response. An exception occurred during the method call."
  },
  "api/DontPanic.TumblrSharp.OAuth.OAuthClient.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.OAuthClient.html",
    "title": "Class OAuthClient | NewTumblrSharp",
    "summary": "Class OAuthClient Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll A client for OAuth. public class OAuthClient Inheritance object OAuthClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class can be used to authorize the application to access the user's account. If the user authorizes the app, an access token will be generated that can then be used to make OAuth method calls. Constructors OAuthClient(IHmacSha1HashProvider, string, string) Initializes a new instance of the DontPanic.TumblrSharp.OAuth client class. Methods GetAccessTokenAsync(Token, string) Gets the authorized access token that can be used to make OAuth calls. GetAccessTokenAsync(Token, string, string) Gets the authorized access token that can be used to make OAuth calls. GetAuthorizeUrl(Token) Builds the url that is required to connect to the server, where the server will authenticate the user and ask for authorization. GetRequestTokenAsync(string) Asynchronously gets a request token. PerformXAuthAsync(string, string) Asynchronously performs XAuth."
  },
  "api/DontPanic.TumblrSharp.OAuth.OAuthClientFactory.Create.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.OAuthClientFactory.Create.html",
    "title": "Method Create | NewTumblrSharp",
    "summary": "Method Create Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll Create(string, string) Creates a new OAuthClient instance. public OAuthClient Create(string consumerKey, string consumerSecret) Parameters consumerKey string The consumer key. consumerSecret string The consumer secret. Returns OAuthClient A OAuthClient instance."
  },
  "api/DontPanic.TumblrSharp.OAuth.OAuthClientFactory.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.OAuthClientFactory.html",
    "title": "Class OAuthClientFactory | NewTumblrSharp",
    "summary": "Class OAuthClientFactory Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll Factory for OAuthClient instances. public class OAuthClientFactory : IOAuthClientFactory Inheritance object OAuthClientFactory Implements IOAuthClientFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(string, string) Creates a new OAuthClient instance."
  },
  "api/DontPanic.TumblrSharp.OAuth.OAuthException.-ctor.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.OAuthException.-ctor.html",
    "title": "Constructor OAuthException | NewTumblrSharp",
    "summary": "Constructor OAuthException Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll OAuthException() Initializes a new instance of the OAuthException class. public OAuthException() OAuthException(string, Exception) Initializes a new instance of the OAuthException class. public OAuthException(string message, Exception innerException = null) Parameters message string The error message. innerException Exception An optional inner exception."
  },
  "api/DontPanic.TumblrSharp.OAuth.OAuthException.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.OAuthException.html",
    "title": "Class OAuthException | NewTumblrSharp",
    "summary": "Class OAuthException Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll Represents an error that occour during a OAuth call. public class OAuthException : Exception, ISerializable Inheritance object Exception OAuthException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OAuthException() Initializes a new instance of the OAuthException class. OAuthException(string, Exception) Initializes a new instance of the OAuthException class."
  },
  "api/DontPanic.TumblrSharp.OAuth.OAuthMessageHandler.-ctor.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.OAuthMessageHandler.-ctor.html",
    "title": "Constructor OAuthMessageHandler | NewTumblrSharp",
    "summary": "Constructor OAuthMessageHandler Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll OAuthMessageHandler(IHmacSha1HashProvider, string, string, Token) Create OAuthMessageHandler public OAuthMessageHandler(IHmacSha1HashProvider hashProvider, string consumerKey, string consumerSecret, Token oAuthToken) Parameters hashProvider IHmacSha1HashProvider consumerKey string consumerSecret string oAuthToken Token OAuthMessageHandler(HttpMessageHandler, IHmacSha1HashProvider, string, string, Token) Create OAuthMessageHandle public OAuthMessageHandler(HttpMessageHandler innerHandler, IHmacSha1HashProvider hashProvider, string consumerKey, string consumerSecret, Token oAuthToken) Parameters innerHandler HttpMessageHandler hashProvider IHmacSha1HashProvider consumerKey string consumerSecret string oAuthToken Token"
  },
  "api/DontPanic.TumblrSharp.OAuth.OAuthMessageHandler.SendAsync.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.OAuthMessageHandler.SendAsync.html",
    "title": "Method SendAsync | NewTumblrSharp",
    "summary": "Method SendAsync Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll SendAsync(HttpRequestMessage, CancellationToken) Send methode protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters request HttpRequestMessage cancellationToken CancellationToken Returns Task<HttpResponseMessage>"
  },
  "api/DontPanic.TumblrSharp.OAuth.OAuthMessageHandler.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.OAuthMessageHandler.html",
    "title": "Class OAuthMessageHandler | NewTumblrSharp",
    "summary": "Class OAuthMessageHandler Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll MessageHandler for the HttpClient public class OAuthMessageHandler : DelegatingHandler, IDisposable Inheritance object HttpMessageHandler DelegatingHandler OAuthMessageHandler Implements IDisposable Inherited Members DelegatingHandler.Dispose(bool) DelegatingHandler.InnerHandler HttpMessageHandler.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OAuthMessageHandler(IHmacSha1HashProvider, string, string, Token) Create OAuthMessageHandler OAuthMessageHandler(HttpMessageHandler, IHmacSha1HashProvider, string, string, Token) Create OAuthMessageHandle Methods SendAsync(HttpRequestMessage, CancellationToken) Send methode"
  },
  "api/DontPanic.TumblrSharp.OAuth.Token.-ctor.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.Token.-ctor.html",
    "title": "Constructor Token | NewTumblrSharp",
    "summary": "Constructor Token Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll Token(string, string) Initializes a new instance of the Token class. public Token(string key, string secret) Parameters key string The token's key. secret string The token's secret."
  },
  "api/DontPanic.TumblrSharp.OAuth.Token.IsValid.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.Token.IsValid.html",
    "title": "Property IsValid | NewTumblrSharp",
    "summary": "Property IsValid Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll IsValid true is the token is valid; otherwise false. public bool IsValid { get; } Property Value bool Remarks A token is valid if both Key and Secret are not null or empty."
  },
  "api/DontPanic.TumblrSharp.OAuth.Token.Key.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.Token.Key.html",
    "title": "Property Key | NewTumblrSharp",
    "summary": "Property Key Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll Key Gets the token's key. public string Key { get; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.OAuth.Token.Secret.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.Token.Secret.html",
    "title": "Property Secret | NewTumblrSharp",
    "summary": "Property Secret Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll Secret Gets the token's secret. public string Secret { get; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.OAuth.Token.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.Token.html",
    "title": "Class Token | NewTumblrSharp",
    "summary": "Class Token Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll Represents a token for OAuth. public class Token : IEquatable<Token> Inheritance object Token Implements IEquatable<Token> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Token(string, string) Initializes a new instance of the Token class. Properties IsValid true is the token is valid; otherwise false. Key Gets the token's key. Secret Gets the token's secret."
  },
  "api/DontPanic.TumblrSharp.OAuth.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.html",
    "title": "Namespace DontPanic.TumblrSharp.OAuth | NewTumblrSharp",
    "summary": "Namespace DontPanic.TumblrSharp.OAuth Classes OAuthClient A client for OAuth. OAuthClientFactory Factory for OAuthClient instances. OAuthException Represents an error that occour during a OAuth call. OAuthMessageHandler MessageHandler for the HttpClient Token Represents a token for OAuth. Interfaces IOAuthClientFactory Factory for OAuthClient instances."
  },
  "api/DontPanic.TumblrSharp.PostCreationState.html": {
    "href": "api/DontPanic.TumblrSharp.PostCreationState.html",
    "title": "Enum PostCreationState | NewTumblrSharp",
    "summary": "Enum PostCreationState Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Defines the creation state of a post. [JsonConverter(typeof(StringEnumConverter))] public enum PostCreationState Fields [EnumMember(Value = \"draft\")] Draft = 1 The post will be created as draft. [EnumMember(Value = \"private\")] Private = 3 The post will be created as private. [EnumMember(Value = \"published\")] Published = 0 The post will be created as published. [EnumMember(Value = \"queued\")] Queue = 2 The post will be created queued. [EnumMember(Value = \"submission\")] Submission = 4 The post is an unpublished submission"
  },
  "api/DontPanic.TumblrSharp.PostData.CreateAudio.html": {
    "href": "api/DontPanic.TumblrSharp.PostData.CreateAudio.html",
    "title": "Method CreateAudio | NewTumblrSharp",
    "summary": "Method CreateAudio Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll CreateAudio(BinaryFile, string, IEnumerable<string>, PostCreationState) Creates the PostData for an audio post. public static PostData CreateAudio(BinaryFile audioFile, string caption = null, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters audioFile BinaryFile The audio file to upload, defined as a BinaryFile instance. caption string The caption for the audio post. tags IEnumerable<string> The tags to associate with the post. state PostCreationState The PostCreationState of the post. Returns PostData A PostData instance representing the post. Remarks The audio file can only be posted to Tumblr once, otherwise the post will be rejected with a “Bad request” response. Likewise, the size limit appears to be less than the 10 MB specified in the official API documentation. Exceptions ArgumentNullException audioFile is null. CreateAudio(string, string, IEnumerable<string>, PostCreationState) Creates the PostData for an audio post. public static PostData CreateAudio(string url, string caption = null, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters url string The url to the audio file to post (the url must not be on Tumblr). caption string The caption for the audio post. tags IEnumerable<string> The tags to associate with the post. state PostCreationState The PostCreationState of the post. Returns PostData A PostData instance representing the post. Remarks The audio file can only be posted to Tumblr once, otherwise the post will be rejected with a “Bad request” response. Likewise, the size limit appears to be less than the 10 MB specified in the official API documentation. Exceptions ArgumentNullException url is null. ArgumentException url is empty."
  },
  "api/DontPanic.TumblrSharp.PostData.CreateChat.html": {
    "href": "api/DontPanic.TumblrSharp.PostData.CreateChat.html",
    "title": "Method CreateChat | NewTumblrSharp",
    "summary": "Method CreateChat Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll CreateChat(string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a chat post. public static PostData CreateChat(string conversation, string title = null, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters conversation string The chat conversation. title string The title of the chat. tags IEnumerable<string> The tags to associate with the post. state PostCreationState The PostCreationState of the post. Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException conversation is null. ArgumentException conversation is empty."
  },
  "api/DontPanic.TumblrSharp.PostData.CreateLink.html": {
    "href": "api/DontPanic.TumblrSharp.PostData.CreateLink.html",
    "title": "Method CreateLink | NewTumblrSharp",
    "summary": "Method CreateLink Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll CreateLink(string, string, string, string, string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a link post. public static PostData CreateLink(string url, string title = null, string description = null, string thumbnail = null, string excerpt = null, string author = null, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters url string The url for the link. title string The display text for the link. description string The link's description. thumbnail string The url of an image to use as a thumbnail for the post excerpt string An excerpt from the page the link points to, HTML entities should be escaped author string The name of the author from the page the link points to, HTML entities should be escaped tags IEnumerable<string> The tags to associate with the post. state PostCreationState The PostCreationState of the post. Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException url is null. ArgumentException url is empty."
  },
  "api/DontPanic.TumblrSharp.PostData.CreatePhoto.html": {
    "href": "api/DontPanic.TumblrSharp.PostData.CreatePhoto.html",
    "title": "Method CreatePhoto | NewTumblrSharp",
    "summary": "Method CreatePhoto Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll CreatePhoto(string, string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a photo post with a source url for photo. public static PostData CreatePhoto(string sourceUrl, string caption = null, string clickThroughUrl = null, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters sourceUrl string The photo source URL caption string The user-supplied caption, HTML allowed clickThroughUrl string The \"click-through URL\" for the photo tags IEnumerable<string> list of tags for this post state PostCreationState The state of the post. Specify one of the following: published, draft, queue, private Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException the url for photo source must be set and not null ArgumentException the url for photo source must be set CreatePhoto(BinaryFile) Creates the PostData for a photo post. public static PostData CreatePhoto(BinaryFile photo) Parameters photo BinaryFile A photo to upload, defined as a BinaryFile instance. Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException photo is null. CreatePhoto(BinaryFile, string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a photo post. public static PostData CreatePhoto(BinaryFile photo, string caption = null, string clickThroughUrl = null, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters photo BinaryFile A photo to upload, defined as a BinaryFile instance. caption string The optional string caption for this photo post. clickThroughUrl string The photo(s) click trough url. tags IEnumerable<string> The optional array of string used for tags. state PostCreationState The PostCreationState of this photo post. Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException photo is null. CreatePhoto(IEnumerable<BinaryFile>, string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a photo post. public static PostData CreatePhoto(IEnumerable<BinaryFile> photos, string caption = null, string clickThroughUrl = null, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters photos IEnumerable<BinaryFile> A list of photos to upload, defined as BinaryFile instances. caption string The caption for the photo post. clickThroughUrl string The photo(s) click trough url. tags IEnumerable<string> The tags to associate with the post. state PostCreationState The PostCreationState of the post. Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException photos is null. ArgumentException photos is empty."
  },
  "api/DontPanic.TumblrSharp.PostData.CreateQuote.html": {
    "href": "api/DontPanic.TumblrSharp.PostData.CreateQuote.html",
    "title": "Method CreateQuote | NewTumblrSharp",
    "summary": "Method CreateQuote Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll CreateQuote(string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a quote post. public static PostData CreateQuote(string quote, string source, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters quote string The quote. source string The quote's source. tags IEnumerable<string> The tags to associate with the post. state PostCreationState The PostCreationState of the post. Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException quote is null. ArgumentException quote is empty."
  },
  "api/DontPanic.TumblrSharp.PostData.CreateText.html": {
    "href": "api/DontPanic.TumblrSharp.PostData.CreateText.html",
    "title": "Method CreateText | NewTumblrSharp",
    "summary": "Method CreateText Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll CreateText(string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a text post. public static PostData CreateText(string body = null, string title = null, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters body string The body of the text post. title string The title of the text post. tags IEnumerable<string> The tags to associate with the post. state PostCreationState The PostCreationState of the post. Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException body is null. ArgumentException body is empty."
  },
  "api/DontPanic.TumblrSharp.PostData.CreateVideo.html": {
    "href": "api/DontPanic.TumblrSharp.PostData.CreateVideo.html",
    "title": "Method CreateVideo | NewTumblrSharp",
    "summary": "Method CreateVideo Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll CreateVideo(BinaryFile, string, IEnumerable<string>, PostCreationState) Creates the PostData for a video post. public static PostData CreateVideo(BinaryFile videoFile, string caption = null, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters videoFile BinaryFile The video file to upload, defined as a BinaryFile instance. caption string The caption for the video post. tags IEnumerable<string> The tags to associate with the post. state PostCreationState The PostCreationState of the post. Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException videoFile is null. CreateVideo(string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a video post. public static PostData CreateVideo(string embedCode, string caption = null, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters embedCode string The HTML embed code for the video. caption string The caption for the video post. tags IEnumerable<string> The tags to associate with the post. state PostCreationState The PostCreationState of the post. Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException embedCode is null. ArgumentException embedCode is empty."
  },
  "api/DontPanic.TumblrSharp.PostData.Date.html": {
    "href": "api/DontPanic.TumblrSharp.PostData.Date.html",
    "title": "Property Date | NewTumblrSharp",
    "summary": "Property Date Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Date Gets or sets the post date. public DateTimeOffset? Date { get; set; } Property Value DateTimeOffset?"
  },
  "api/DontPanic.TumblrSharp.PostData.Format.html": {
    "href": "api/DontPanic.TumblrSharp.PostData.Format.html",
    "title": "Property Format | NewTumblrSharp",
    "summary": "Property Format Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Format Gets or sets the PostFormat. public PostFormat Format { get; set; } Property Value PostFormat"
  },
  "api/DontPanic.TumblrSharp.PostData.Publish_On.html": {
    "href": "api/DontPanic.TumblrSharp.PostData.Publish_On.html",
    "title": "Property Publish_On | NewTumblrSharp",
    "summary": "Property Publish_On Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Publish_On Gets or sets the DateTime of publish this, if PostCreationState is Queue public DateTime? Publish_On { get; set; } Property Value DateTime?"
  },
  "api/DontPanic.TumblrSharp.PostData.Slug.html": {
    "href": "api/DontPanic.TumblrSharp.PostData.Slug.html",
    "title": "Property Slug | NewTumblrSharp",
    "summary": "Property Slug Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Slug Gets or sets the post slug. public string Slug { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.PostData.State.html": {
    "href": "api/DontPanic.TumblrSharp.PostData.State.html",
    "title": "Property State | NewTumblrSharp",
    "summary": "Property State Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll State Gets or sets the PostCreationState of the post. public PostCreationState State { get; set; } Property Value PostCreationState"
  },
  "api/DontPanic.TumblrSharp.PostData.Tags.html": {
    "href": "api/DontPanic.TumblrSharp.PostData.Tags.html",
    "title": "Property Tags | NewTumblrSharp",
    "summary": "Property Tags Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Tags Gets the tags associated with the post. public List<string> Tags { get; } Property Value List<string>"
  },
  "api/DontPanic.TumblrSharp.PostData.ToMethodParameterSet.html": {
    "href": "api/DontPanic.TumblrSharp.PostData.ToMethodParameterSet.html",
    "title": "Method ToMethodParameterSet | NewTumblrSharp",
    "summary": "Method ToMethodParameterSet Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll ToMethodParameterSet() Converts the current instance to a MethodParameterSet/ public MethodParameterSet ToMethodParameterSet() Returns MethodParameterSet A MethodParameterSet."
  },
  "api/DontPanic.TumblrSharp.PostData.Tweet.html": {
    "href": "api/DontPanic.TumblrSharp.PostData.Tweet.html",
    "title": "Property Tweet | NewTumblrSharp",
    "summary": "Property Tweet Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Tweet Gets or sets the autotweet (if enabled) for this post: set to off for no tweet, or enter text to override the default tweet. public string Tweet { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.PostData.html": {
    "href": "api/DontPanic.TumblrSharp.PostData.html",
    "title": "Class PostData | NewTumblrSharp",
    "summary": "Class PostData Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Represents a post to be submitted to a Tumblr blog. public class PostData Inheritance object PostData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class cannot be instantiated directly. Use one of the static factory methods to create an instance of this class. Properties Date Gets or sets the post date. Format Gets or sets the PostFormat. Publish_On Gets or sets the DateTime of publish this, if PostCreationState is Queue Slug Gets or sets the post slug. State Gets or sets the PostCreationState of the post. Tags Gets the tags associated with the post. Tweet Gets or sets the autotweet (if enabled) for this post: set to off for no tweet, or enter text to override the default tweet. Methods CreateAudio(BinaryFile, string, IEnumerable<string>, PostCreationState) Creates the PostData for an audio post. CreateAudio(string, string, IEnumerable<string>, PostCreationState) Creates the PostData for an audio post. CreateChat(string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a chat post. CreateLink(string, string, string, string, string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a link post. CreatePhoto(BinaryFile) Creates the PostData for a photo post. CreatePhoto(BinaryFile, string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a photo post. CreatePhoto(IEnumerable<BinaryFile>, string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a photo post. CreatePhoto(string, string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a photo post with a source url for photo. CreateQuote(string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a quote post. CreateText(string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a text post. CreateVideo(BinaryFile, string, IEnumerable<string>, PostCreationState) Creates the PostData for a video post. CreateVideo(string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a video post. ToMethodParameterSet() Converts the current instance to a MethodParameterSet/"
  },
  "api/DontPanic.TumblrSharp.PostFilter.html": {
    "href": "api/DontPanic.TumblrSharp.PostFilter.html",
    "title": "Enum PostFilter | NewTumblrSharp",
    "summary": "Enum PostFilter Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Defines the filter for a post. public enum PostFilter Fields Html = 0 No filter. Raw = 2 As entered by the user (no post-processing); if the user writes in Markdown, the Markdown will be returned rather than html. Text = 1 Plain text, no html."
  },
  "api/DontPanic.TumblrSharp.PostFormat.html": {
    "href": "api/DontPanic.TumblrSharp.PostFormat.html",
    "title": "Enum PostFormat | NewTumblrSharp",
    "summary": "Enum PostFormat Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Defines the post format. public enum PostFormat Fields Html = 0 Html. Markdown = 1 Markdown."
  },
  "api/DontPanic.TumblrSharp.PostType.html": {
    "href": "api/DontPanic.TumblrSharp.PostType.html",
    "title": "Enum PostType | NewTumblrSharp",
    "summary": "Enum PostType Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Defines the post filter. public enum PostType Fields All = 0 All posts. Answer = 4 Answer. Audio = 6 Audio. Chat = 8 Chat. Link = 3 Link. Photo = 7 Photo. Quote = 2 Quote. Text = 1 Text. Video = 5 Video."
  },
  "api/DontPanic.TumblrSharp.TumblrClientBase.-ctor.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrClientBase.-ctor.html",
    "title": "Constructor TumblrClientBase | NewTumblrSharp",
    "summary": "Constructor TumblrClientBase Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll TumblrClientBase(IHmacSha1HashProvider, string, string, Token) Initializes a new instance of the TumblrClientBase class. public TumblrClientBase(IHmacSha1HashProvider hashProvider, string consumerKey, string consumerSecret, Token oAuthToken = null) Parameters hashProvider IHmacSha1HashProvider A IHmacSha1HashProvider implementation used to generate a HMAC-SHA1 hash for OAuth purposes. consumerKey string The consumer key. consumerSecret string The consumer secret. oAuthToken Token An optional access token for the API. If no access token is provided, only the methods that do not require OAuth can be invoked successfully. Remarks You can get a consumer key and a consumer secret by registering an application with Tumblr: http://www.tumblr.com/oauth/apps platform: .NetStandard 1.1+ TumblrClientBase(IHttpClientFactory, IHmacSha1HashProvider, string, string, Token) Initializes a new instance of the TumblrClientBase class. public TumblrClientBase(IHttpClientFactory httpClientFactory, IHmacSha1HashProvider hashProvider, string consumerKey, string consumerSecret, Token oAuthToken = null) Parameters httpClientFactory IHttpClientFactory HttpClientFactory to create internal HttpClient hashProvider IHmacSha1HashProvider A IHmacSha1HashProvider implementation used to generate a HMAC-SHA1 hash for OAuth purposes. consumerKey string The consumer key. consumerSecret string The consumer secret. oAuthToken Token An optional access token for the API. If no access token is provided, only the methods that do not require OAuth can be invoked successfully. Remarks You can get a consumer key and a consumer secret by registering an application with Tumblr: http://www.tumblr.com/oauth/apps platform: .NetStandard 2.0+, .Net Core 2.2+"
  },
  "api/DontPanic.TumblrSharp.TumblrClientBase.CallApiMethodAsync.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrClientBase.CallApiMethodAsync.html",
    "title": "Method CallApiMethodAsync | NewTumblrSharp",
    "summary": "Method CallApiMethodAsync Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll CallApiMethodAsync<TResponse, TResult>(ApiMethod, Func<TResponse, TResult>, CancellationToken, IEnumerable<JsonConverter>) Asynchronously invokes a method on the Tumblr API, and performs a projection on the response before returning the result. public Task<TResult> CallApiMethodAsync<TResponse, TResult>(ApiMethod method, Func<TResponse, TResult> projection, CancellationToken cancellationToken, IEnumerable<JsonConverter> converters = null) where TResponse : class where TResult : class Parameters method ApiMethod The ApiMethod to invoke. projection Func<TResponse, TResult> The projection function that transforms TResponse into TResult. cancellationToken CancellationToken A CancellationToken that can be used to cancel the operation. converters IEnumerable<JsonConverter> An optional list of JSON converters that will be used while deserializing the response from the Tumblr API. Returns Task<TResult> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a TResult instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Type Parameters TResponse The type of the response received from the API. This must be a type that can be deserialized from the response JSON. TResult The actual type that is the result of the method. Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException method is null. projection is null. CallApiMethodAsync<TResult>(ApiMethod, CancellationToken, IEnumerable<JsonConverter>) Asynchronously invokes a method on the Tumblr API. public Task<TResult> CallApiMethodAsync<TResult>(ApiMethod method, CancellationToken cancellationToken, IEnumerable<JsonConverter> converters = null) where TResult : class Parameters method ApiMethod The ApiMethod to invoke. cancellationToken CancellationToken A CancellationToken that can be used to cancel the operation. converters IEnumerable<JsonConverter> An optional list of JSON converters that will be used while deserializing the response from the Tumblr API. Returns Task<TResult> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a TResult instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Type Parameters TResult The type of the response received from the API. This must be a type that can be deserialized from the response JSON. Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException method is null."
  },
  "api/DontPanic.TumblrSharp.TumblrClientBase.CallApiMethodNoResultAsync.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrClientBase.CallApiMethodNoResultAsync.html",
    "title": "Method CallApiMethodNoResultAsync | NewTumblrSharp",
    "summary": "Method CallApiMethodNoResultAsync Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll CallApiMethodNoResultAsync(ApiMethod, CancellationToken) Asynchronously invokes a method on the Tumblr API without expecting a response. public Task CallApiMethodNoResultAsync(ApiMethod method, CancellationToken cancellationToken) Parameters method ApiMethod The ApiMethod to invoke. cancellationToken CancellationToken A CancellationToken that can be used to cancel the operation. Returns Task A Task that can be used to track the operation. If the task fails, Exception will carry a TumblrException representing the error occurred during the call. Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException method is null."
  },
  "api/DontPanic.TumblrSharp.TumblrClientBase.Dispose.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrClientBase.Dispose.html",
    "title": "Method Dispose | NewTumblrSharp",
    "summary": "Method Dispose Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Dispose() Disposes of the object and the internal HttpClient instance. public void Dispose() Dispose(bool) Subclasses can override this method to provide custom disposing logic. protected virtual void Dispose(bool disposing) Parameters disposing bool true if managed resources have to be disposed; otherwise false."
  },
  "api/DontPanic.TumblrSharp.TumblrClientBase.OAuthToken.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrClientBase.OAuthToken.html",
    "title": "Property OAuthToken | NewTumblrSharp",
    "summary": "Property OAuthToken Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll OAuthToken Gets the OAuth Token used when the object was created. public Token OAuthToken { get; } Property Value Token"
  },
  "api/DontPanic.TumblrSharp.TumblrClientBase.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrClientBase.html",
    "title": "Class TumblrClientBase | NewTumblrSharp",
    "summary": "Class TumblrClientBase Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Encapsulates the Tumblr API. public class TumblrClientBase : IDisposable Inheritance object TumblrClientBase Implements IDisposable Derived TumblrClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TumblrClientBase(IHmacSha1HashProvider, string, string, Token) Initializes a new instance of the TumblrClientBase class. TumblrClientBase(IHttpClientFactory, IHmacSha1HashProvider, string, string, Token) Initializes a new instance of the TumblrClientBase class. Properties OAuthToken Gets the OAuth Token used when the object was created. Methods CallApiMethodAsync<TResult>(ApiMethod, CancellationToken, IEnumerable<JsonConverter>) Asynchronously invokes a method on the Tumblr API. CallApiMethodAsync<TResponse, TResult>(ApiMethod, Func<TResponse, TResult>, CancellationToken, IEnumerable<JsonConverter>) Asynchronously invokes a method on the Tumblr API, and performs a projection on the response before returning the result. CallApiMethodNoResultAsync(ApiMethod, CancellationToken) Asynchronously invokes a method on the Tumblr API without expecting a response. Dispose() Disposes of the object and the internal HttpClient instance. Dispose(bool) Subclasses can override this method to provide custom disposing logic."
  },
  "api/DontPanic.TumblrSharp.TumblrClientFactory.Create.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrClientFactory.Create.html",
    "title": "Method Create | NewTumblrSharp",
    "summary": "Method Create Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.Client.dll Create<TClient>(IHttpClientFactory, string, string, Token) Creates a new Tumblr client instance of type TClient. public TClient Create<TClient>(IHttpClientFactory httpClientFactory, string consumerKey, string consumerSecret, Token oAuthToken = null) where TClient : TumblrClientBase Parameters httpClientFactory IHttpClientFactory HttpClientFactory to create internal HttpClient consumerKey string The consumer key. consumerSecret string The consumer secret. oAuthToken Token An optional access token for the API. If no access token is provided, only the methods that do not require OAuth can be invoked successfully. Returns TClient A new Tumblr client instance of type TClient. Type Parameters TClient The type of client to create (must derive from TumblrClientBase). Remarks This factory only supports TumblrClientBase or TumblrClient as values for TClient. Exceptions ArgumentException TClient is not TumblrClientBase or TumblrClient. Create<TClient>(string, string, Token) Creates a new Tumblr client instance of type TClient. public TClient Create<TClient>(string consumerKey, string consumerSecret, Token oAuthToken = null) where TClient : TumblrClientBase Parameters consumerKey string The consumer key. consumerSecret string The consumer secret. oAuthToken Token An optional access token for the API. If no access token is provided, only the methods that do not require OAuth can be invoked successfully. Returns TClient A new Tumblr client instance of type TClient. Type Parameters TClient The type of client to create (must derive from TumblrClientBase). Remarks This factory only supports TumblrClientBase or TumblrClient as values for TClient. Exceptions ArgumentException TClient is not TumblrClientBase or TumblrClient."
  },
  "api/DontPanic.TumblrSharp.TumblrClientFactory.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrClientFactory.html",
    "title": "Class TumblrClientFactory | NewTumblrSharp",
    "summary": "Class TumblrClientFactory Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.Client.dll Factory for TumblrClientBase instances. public class TumblrClientFactory : ITumblrClientFactory Inheritance object TumblrClientFactory Implements ITumblrClientFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create<TClient>(IHttpClientFactory, string, string, Token) Creates a new Tumblr client instance of type TClient. Create<TClient>(string, string, Token) Creates a new Tumblr client instance of type TClient."
  },
  "api/DontPanic.TumblrSharp.TumblrError.Code.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrError.Code.html",
    "title": "Property Code | NewTumblrSharp",
    "summary": "Property Code Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Code codenumber of error [JsonProperty(PropertyName = \"code\")] public int Code { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.TumblrError.Detail.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrError.Detail.html",
    "title": "Property Detail | NewTumblrSharp",
    "summary": "Property Detail Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Detail details of error [JsonProperty(PropertyName = \"detail\")] public string Detail { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.TumblrError.Equals.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrError.Equals.html",
    "title": "Method Equals | NewTumblrSharp",
    "summary": "Method Equals Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Equals(object) compare this object with another public override bool Equals(object obj) Parameters obj object Object to be equals Returns bool"
  },
  "api/DontPanic.TumblrSharp.TumblrError.GetHashCode.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrError.GetHashCode.html",
    "title": "Method GetHashCode | NewTumblrSharp",
    "summary": "Method GetHashCode Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll GetHashCode() returns a hash code public override int GetHashCode() Returns int"
  },
  "api/DontPanic.TumblrSharp.TumblrError.Title.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrError.Title.html",
    "title": "Property Title | NewTumblrSharp",
    "summary": "Property Title Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Title title of error [JsonProperty(PropertyName = \"title\")] public string Title { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.TumblrError.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrError.html",
    "title": "Class TumblrError | NewTumblrSharp",
    "summary": "Class TumblrError Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll TumblrError public class TumblrError Inheritance object TumblrError Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Code codenumber of error Detail details of error Title title of error Methods Equals(object) compare this object with another GetHashCode() returns a hash code"
  },
  "api/DontPanic.TumblrSharp.TumblrErrorsConverter.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrErrorsConverter.html",
    "title": "Class TumblrErrorsConverter | NewTumblrSharp",
    "summary": "Class TumblrErrorsConverter Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll convert TumblrError public class TumblrErrorsConverter : JsonConverter Inheritance object JsonConverter TumblrErrorsConverter Inherited Members JsonConverter.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DontPanic.TumblrSharp.TumblrException.-ctor.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrException.-ctor.html",
    "title": "Constructor TumblrException | NewTumblrSharp",
    "summary": "Constructor TumblrException Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll TumblrException(HttpStatusCode, string, IEnumerable<TumblrError>, Exception) Initializes a new instance of the TumblrException class. public TumblrException(HttpStatusCode statusCode, string message = null, IEnumerable<TumblrError> errors = null, Exception innerException = null) Parameters statusCode HttpStatusCode The HttpStatusCode of the error. message string The error message. errors IEnumerable<TumblrError> An optional list of extra errors. innerException Exception An optional inner exception."
  },
  "api/DontPanic.TumblrSharp.TumblrException.Errors.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrException.Errors.html",
    "title": "Property Errors | NewTumblrSharp",
    "summary": "Property Errors Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Errors Gets the extra error messages returned from the server (if any). public IReadOnlyCollection<TumblrError> Errors { get; } Property Value IReadOnlyCollection<TumblrError>"
  },
  "api/DontPanic.TumblrSharp.TumblrException.StatusCode.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrException.StatusCode.html",
    "title": "Property StatusCode | NewTumblrSharp",
    "summary": "Property StatusCode Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll StatusCode Gets the HttpStatusCode of the error. public HttpStatusCode StatusCode { get; } Property Value HttpStatusCode"
  },
  "api/DontPanic.TumblrSharp.TumblrException.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrException.html",
    "title": "Class TumblrException | NewTumblrSharp",
    "summary": "Class TumblrException Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Represents an error that occour during a Tumblr API call. public class TumblrException : Exception, ISerializable Inheritance object Exception TumblrException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TumblrException(HttpStatusCode, string, IEnumerable<TumblrError>, Exception) Initializes a new instance of the TumblrException class. Properties Errors Gets the extra error messages returned from the server (if any). StatusCode Gets the HttpStatusCode of the error."
  },
  "api/DontPanic.TumblrSharp.UserMethod.-ctor.html": {
    "href": "api/DontPanic.TumblrSharp.UserMethod.-ctor.html",
    "title": "Constructor UserMethod | NewTumblrSharp",
    "summary": "Constructor UserMethod Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll UserMethod(string, Token, HttpMethod, MethodParameterSet) Initializes a new instance of the UserMethod class. public UserMethod(string methodName, Token oAuthToken, HttpMethod httpMethod, MethodParameterSet parameters = null) Parameters methodName string The name of the method to call. The method url will be automatically built. oAuthToken Token The OAuth Token to use for the call. Can be null if the method does not require OAuth. httpMethod HttpMethod The required HttpMethod for the Tumblr API call. Only Get and Post are supported. parameters MethodParameterSet The parameters for the Tumblr API call. Can be null if the method does not require parameters. Exceptions ArgumentNullException methodName is null. ArgumentException methodName is empty."
  },
  "api/DontPanic.TumblrSharp.UserMethod.html": {
    "href": "api/DontPanic.TumblrSharp.UserMethod.html",
    "title": "Class UserMethod | NewTumblrSharp",
    "summary": "Class UserMethod Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Represents a user API method. public class UserMethod : ApiMethod Inheritance object ApiMethod UserMethod Inherited Members ApiMethod.Url ApiMethod.OAuthToken ApiMethod.HttpMethod ApiMethod.Parameters object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserMethod(string, Token, HttpMethod, MethodParameterSet) Initializes a new instance of the UserMethod class."
  },
  "api/DontPanic.TumblrSharp.html": {
    "href": "api/DontPanic.TumblrSharp.html",
    "title": "Namespace DontPanic.TumblrSharp | NewTumblrSharp",
    "summary": "Namespace DontPanic.TumblrSharp Classes ApiMethod Encapsulates all the data required to make a Tumblr API call. BinaryFile Represents a binary file (photo, video or audio). BlogMethod Represents a blog API method. DateTimeHelper Converts from Unix-type timestamp to DateTime and vice-versa. ExtensionHttpRequestMessage Extensionsclass for HttpRequestMessage HmacSha1HashProvider Provides an implementation of IHmacSha1HashProvider for signing OAuth requests. MethodParameterSet A sorted set of IMethodParameter instances. PostData Represents a post to be submitted to a Tumblr blog. TumblrClientBase Encapsulates the Tumblr API. TumblrClientFactory Factory for TumblrClientBase instances. TumblrError TumblrError TumblrErrorsConverter convert TumblrError TumblrException Represents an error that occour during a Tumblr API call. UserMethod Represents a user API method. Interfaces IHmacSha1HashProvider Provides HMAC-SHA1 hash for signing OAuth requests. IMethodParameter Represents a parameter for an ApiMethod. ITumblrClientFactory Generic factory for TumblrClientBase instances. Enums AvatarShape Options for what shape a user's avatar is intended to display as BlogType Defines the type of a blog. NoteType Defines the type of note on a post PostCreationState Defines the creation state of a post. PostFilter Defines the filter for a post. PostFormat Defines the post format. PostType Defines the post filter."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | NewTumblrSharp",
    "summary": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation!"
  },
  "articles/Authenticating.html": {
    "href": "articles/Authenticating.html",
    "title": "Authenticating | NewTumblrSharp",
    "summary": "Authenticating To use TumblrSharp properly, you'll need to authenticate with a user account. Tumblr does provide some unauthenticated API endpoints in their V1 API, but TumblrSharp doesn't cover those (and will most likely never). without OAuth Flow Often, apps that consume 3rd party APIs use OAuth. There are a few ways to setup TumblrSharp with OAuth, but the easiest is to use the Tumblr Console. Note - this method is only suitable for your own usage (e.g., if you are making a personal bot or anything specific to your own user account. Please look below if you're looking to make an app that anyone can use). Sign into your account, create an application, and then enter your Consumer key and Consumer Secret into the Tumblr Console. Tumblr will then show four sensitive keys - a consumer key, consumer secret, oauth_token and oauth_token_secret. Here is an example class - using DontPanic.TumblrSharp; using DontPanic.TumblrSharp.Client; public static class Tumblr { public static string Blog { get; set; } public static TumblrClient Client; const string CONSUMER_KEY = \"xxx\"; const string CONSUMER_SECRET = \"xxx\"; const string OAUTH_TOKEN = \"xxx\"; const string OAUTH_TOKEN_SECRET = \"xxx\"; static Tumblr() { // create our client Client = new TumblrClientFactory().Create<TumblrClient>(CONSUMER_KEY, CONSUMER_SECRET, new DontPanic.TumblrSharp.OAuth.Token(OAUTH_TOKEN, OAUTH_TOKEN_SECRET)); } } With that static class set up, you can call methods easily UserInfo userInfo = await Tumblr.Client.GetUserInfoAsync(); with OAuth Flow This section is for production applications. If you want individual user access, you'll need to use OAuth's regular flow. Before continuing, I recommend reading the OAuth Bible if you are not familiar with how OAuth works. (We're doing Three-Legged OAuth 1.0A). This section also is not going to show how to implement C#/WPF/Winforms specific functions, like capturing a custom URI protocol. (However, an examples repository will be up soon!) Overview Before we begin, let's take a minute to deconstruct the steps we'll need to accomplish in order to sign in a user. Create our Tumblr Application Request a Request Token Open a web browser and prompt a user for permission Capture a callback URI Request an Access Token Perform authenticated requests Although this may seem complex, it's not terribly difficult. The hardest part is capturing the callback URI, as it differs depending on if you are using Xamarin, WPF, UWP, etc. Creating the Tumblr Application You will first need to register a Tumblr application. This can be accomplished by signing into your account, clicking Settings > Apps > Register New Application. If you're already signed in, just click here. The form will ask for several necessary fields. You can fill out everything but the Default callback URL anyway you'd like. For the Default callback URL, you have a few choices. If you're using TumblrSharp with an ASP.NET web project, you'll want to set this to your website's URL. If you're creating anything that doesn't live on a web server, you're going to want to specify a custom URI A URI scheme is a simple way to associate certain calls to a specific application. For instance, https:// opens with a web browser, and ftp:// is used with FTP clients like Filezilla. URI schemes are fairly arbitrary. Music streaming company Spotify uses the URI spotify:// to communicate between the browser and their desktop application. For our own application, we can use a custom URI. This can be anything, but I recommend using your app's name. If my application were \"Noted\", my Default callback URL would be noted://. After you have chosen a callback URL, save the application. Getting a request token The first step in the OAuth flow is to get a request token. // create our OAuth client OAuthClient oauthClient = new OAuthClient( new DontPanic.TumblrSharp.HmacSha1HashProvider(), CONSUMER_KEY, CONSUMER_SECRET); // get a request token // replace \"noted://\" with your own callback URI Token requestToken = await oauthClient.GetRequestTokenAsync(\"noted://\"); Next, we need to ask the user for their permission. We can do this in a variety of ways, but preferably we want to open the default browser to a specific URL, which is a specific site route with the requestToken key appended. var authenticateUrl = \"https://www.tumblr.com/oauth/authorize?oauth_token=\" + requestToken.Key; // depending on your project, you might open up a web browser a different way System.Diagnostics.Process.Start(authenticateUrl); Once the webpage opens, the user will hopefully click \"Allow\", and your callback URL will be triggered. Capturing the callback URL This is the toughest part, since it requires a little research. There is a different way for every platform, so look up how to associate your application with a URI protocol. For instance, if you were using Xamarin with Android, you would flag your method like this: [IntentFilter(new[] { Intent.ActionView }, DataScheme = \"noted\", Categories = new[] { Intent.CategoryBrowsable, Intent.CategoryDefault })] We want a specific method to fire when the callback URI is called. Getting access tokens Once you've captured your callback, you're ready for the final step: requesting access tokens. Let's parse our verifier url. // this will be significantly different depending on what type of project you're making. You'll need to consult the documentation for the service in question. var verifierUrl = Intent.Data.EncodedQuery; Once we have the query, we can make a request for an Access Token, and then we can initialize our TumblrClient class! Token accessToken = await oauthClient.GetAccessTokenAsync(requestToken, verifierUrl); TumblrClient client = new TumblrClientFactory().Create<TumblrClient>(CONSUMER_KEY, CONSUMER_SECRET, accessToken); Using the TumblrClient Once we're done, we have access to all of our necessary API endpoints. UserInfo info = await client.GetUserInfoAsync(); Code Token requestToken; async void Authenticate() { // create a new instance of our OAuthClient we will use to authenticate OAuthClient oauthClient = new OAuthClient( new DontPanic.TumblrSharp.HmacSha1HashProvider(), CONSUMER_KEY, CONSUMER_SECRET); // Get our request token with the URI scheme \"noted://\" requestToken = await oauthClient.GetRequestTokenAsync(\"noted://\"); // open up the authenticateUrl in the user's default browser // var authenticateUrl = \"https://www.tumblr.com/oauth/authorize?oauth_token=\" + requestToken.Key; var authenticateUrl = oauthClient.GetAuthorizeUrl(requestToken).AbsoluteUri; System.Diagnostics.Process.Start(authenticateUrl); } // this method is called when the user allows access through the web browser // this will look different depending on what your platform uses to open URI schemes [SomeFlagThatTellsThisMethodWhatToOpen] async void OnAllow(string data) { // get our access token and instantiate a new TumblrClient Token accessToken = await oauthClient.GetAccessTokenAsync(requestToken, data); TumblrClient client = new TumblrClientFactory().Create<TumblrClient>(CONSUMER_KEY, CONSUMER_SECRET, accessToken); // call a method that requires authentication UserInfo info = await client.GetUserInfoAsync(); } Example for WinForms / Asp.Net WinForms Asp.Net"
  },
  "articles/firststeps.html": {
    "href": "articles/firststeps.html",
    "title": "First step | NewTumblrSharp",
    "summary": "First step Nuget TumblrSharp is currently on Nuget as NewTumblrSharp. If you want TumblrSharp just for your own use, and don't wish to develop it further, simply use Nuget. Package-Managment-Console Install-Package NewTumblrSharp Nuget-Manager Open the nuget-manager by right clicking on your project. In the searchbox type NewTumblrSharp and install. Source code If you'd like to use TumblrSharp via its source code to continue development, there are two methods. The following is for Visual Studio users, but the same steps can be used for Xamarin studio, etc. with little modification. Method 1: Adding Projects as References This method is preferred, as you can easily change the TumblrSharp source if needed without switching projects / reloading .dll files. Clone or download the repository Open the project in which you wish to use TumblrSharp Add project files to your solution. for portable: src/portable/TumblrSharp/TumblrSharp.csproj src/portable/TumblrSharp.Client/Tumblrsharp.Client.csproj for other: src/TumblrSharp/TumblrSharp.csproj src/TumblrSharp.Client/Tumblrsharp.Client.csproj Add references to all 2 newly added projects in your main project Method 2: Compiling and adding DLLs Clone or download the repository Build all included projects Add references to the .dll files in your project, the files found in the directory bin."
  },
  "articles/introduction.html": {
    "href": "articles/introduction.html",
    "title": "Introduction | NewTumblrSharp",
    "summary": "Introduction"
  },
  "articles/roadmap.html": {
    "href": "articles/roadmap.html",
    "title": "Roadmap | NewTumblrSharp",
    "summary": "Roadmap 1.2.0.x support .NetStandard 2.0 and .NetCore 2.2 support IHttpClientFactory 1.2.1.x support .NetStandard 2.1 and .NetCore 3.1 2.2.1.x support Tumblr NeuesPostFormt (npf)"
  },
  "index.html": {
    "href": "index.html",
    "title": "NewTumblrSharp | NewTumblrSharp",
    "summary": "NewTumblrSharp This is a continuation of the excellent TumblrSharp C# Library developed by the community. TumblrSharp is a very nicely designed library, and perhaps the only usable C# library that currently exists. However, development for the Codeplex project stopped in 2014. While using the library, I've noticed several bugs which I'll fix and post to this repository."
  }
}